- title: Capitolul 2 - Partajarea structurilor de date
  content_markdown: >
    JavaScript și programul dumneavoastră de WebAssembly au reprezentări
    foarte diferite ale datelor la nivelul memoriei.

    Pentru a complica lucrurile și mai mult, interacțiunea cu mediul gazdă
    din WebAssembly este foarte limitată.

    În acest capitol, vom explora strategiile folosite pentru a putea muta datele
    în ambele direcții.
- title: Importarea funcțiilor
  code: "https://webassembly.studio/?embed&f=pp20eedhka"
  content_markdown: >
    Modulele WebAssembly pot apela doar funcții care au fost importate
    explicit.


    Rust folosește `extern "C" { ... }` pentru a înșirui semnăturile funcțiilor
    importate.


    Observați că apelarea unei funcții importate este considerată nesigură (`unsafe`)
    în Rust deoarece compilatorul

    nu poate garanta ce se întâmplă în implementarea sa.
- title: Limitările funcțiilor
  content_markdown: >
    Tipurile de parametri, respectiv cele de returnare ale funcțiilor sunt limitate la:


    * i32/i64

    * f32/f64


    Așadar, pentru a comunica între JavaScript și WebAssembly, va trebui
    să găsim un artificiu inteligent pentru semnificația numerelor!


    Rust este destul de bun la convertirea tipurilor sale primitive în echivalentele
    numerice ale WebAssembly.
- title: Exportarea memoriei
  content_markdown: >
    Programele WebAssembly își exportă memoria ca un șir lung de octeți (până la
    4GB!).


    Gazda poate interpreta din acești octeți structurile de date create de
    codul programului.


    Șirurile de octeți pot fi, de asemenea, scrise direct în memoria unui program
    din gazdă.


    Scrierea/citirea octeților în/din memoria unui program WebAssembly este

    principalul mijloc de intrare și ieșire a tipurilor de date non-primitive.
- title: ArrayBuffer
  content_markdown: |
    JavaScript reprezintă un șir lung de octeți ca un `ArrayBuffer`.

    Puteți obține o vedere tipizată a acestui buffer care este foarte eficientă
    pentru a interacționa cu el.

    ```JavaScript
    // creează un șir de 8 octeți
    let bytes = new ArrayBuffer(8);
    // vezi acei 8 octeți ca numere întregi fără semn
    // pe 8 biți
    let u8_bytes = new Uint8Array(bytes);
    // modifică array buffer-ul
    u8_bytes[0] = 16; // 00010000
    u8_bytes[1] = 1; // 00000001
    // reinterpretează array buffer-ul u8_bytes ca
    // numere întregi cu semn, pe 32 de biți
    // în reprezentare "little endian"
    let i32_bytes = new Int32Array(u8_bytes.buffer);
    console.log(i32_bytes[0]); 
    ///272 or 00010000000000010000000000000000
    ```
- title: Codificarea/decodificarea UTF-8
  content_markdown: >
    JavaScript oferă funcții utilitare pentru a scrie/citi string-uri UTF-8
    în/din

    octeți din obiecte de tip `ArrayBuffer`.


    ```JavaScript

    let bytes = new ArrayBuffer(8);

    const data = new Uint8Array(bytes);

    data[0] = 72;  // H

    data[1] = 105; // i

    data[2] = 33;  // !

    let str_len = 3;

    const utf8dec = new TextDecoder("utf-8");

    // subșirul ia indicele de început și de sfârșit

    let text = utf8dec.decode(data.subarray(0,str_len));

    console.log(text) // Hi!


    const utf8enc = new TextEncoder("utf-8");

    let text_bytes = utf8enc.encode(text);

    console.log(text_bytes) 

    // Uint8Array(3) [72, 105, 33]

    ```
- title: Înregistrarea textului
  code: "https://webassembly.studio/?embed&f=1gxcr004p3x"
  content_markdown: >
    Haideți să explorăm un exemplu simplu de înregistrare a unui text dintr-un
    program WebAssembly.


    Este necesar:

    1. Să creăm un text compatibil cu UTF-8 în memoria programului nostru.

    2. Să determinăm lungimea octeților textului nostru.

    3. Să găsim o modalitate de a transmite indicele de început al primului octet
    și lungimea în octeți a textului către browser-ul gazdei pentru a putea
    apela `console.log`.


    Iată un exemplu de cum ar arăta acea funcție JavaScript de primire:

    ```JavaScript

    wasm_log(start,len) {
      // extrage textul din memorie și lungimea
      const utf8dec = new TextDecoder("utf-8");
      let buffer = module.instance.exports.memory.buffer;
      let memory = new Uint8Array(buffer);
      let text = utf8dec.decode(memory.subarray(start,start+len));
      console.log(text);
    }

    ```
- title: Citirea textului
  code: "https://webassembly.studio/?embed&f=ubmxmavgf2"
  content_markdown: >
    Să explorăm conceptul opus. Imaginați-vă că dorim să dăm niște text
    unui program WebAssembly.


    Este necesar:

    1. Să determinăm lungimea în octeți a textului pe care vrem să îl furnizăm.

    2. Să alocăm suficientă memorie pentru a stoca textul nostru.

    3. Să copiem octeții în memoria programului nostru la începutul spațiului
    alocat.

    4. Să anunțăm programul nostru că am pus textul în memoria sa la un
    anumit indice de început și lungime specificată în octeți.


    Iată un exemplu de cum ar arăta acea inițializare:

    ```JavaScript
    
    // Transformă "Ferris" în octeți

    const utf8enc = new TextEncoder("utf-8");

    let text = "Ferris";

    let text_bytes = utf8enc.encode(text);


    // Alocă suficient spațiu pentru text

    let len = text_bytes.length;

    let start = module.instance.exports.wasm_malloc(len);


    // Pune textul în memoria programului WebAssembly

    let buffer = module.instance.exports.memory.buffer;

    let memory = new Uint8Array(buffer);

    memory.set(text_bytes, start);


    // Rulează programul

    module.instance.exports.main(start,len);

    ```
- title: Descoperirea reprezentărilor
  content_markdown: >
    Vi s-ar putea părea enervant să trebuiască să dați lungimea alături de
    indicele de început al textului.


    Considerați această situație drept o oportunitate de a reflecta asupra
    convențiilor utile, precum *string-urile din C*,

    care declară terminarea unui text ca o valoare nulă prin caracterul `\0`.


    Nu doriți să transmiteți peste tot o structură de date reprezentată sub formă de octeți?
    Luați în considerare utilizarea `json` în loc.


    Sunteți în controlul atât a propriilor reprezentări în memorie, cât și
    a semnificațiilor acestora sau dacă se potrivesc scenariului
    dumneavoastră de utilizare!
- title: Concluzia capitolului 2
  content_markdown: >
    Trecerea graniței între gazdă și WebAssembly este anevoioasă,
    însă poate aduce performanțe mari.

    Este important să ne amintim că WebAssembly este un cod executabil apropiat de hardware,
    care se preocupă de structuri de memorie
    
    mult mai fin definite decât în JavaScript. Verificați
    dacă limbajul dumneavoastră de programare oferă funcționalități care să vă
    ajute la rezolvarea problemei!

    Pentru Rust, [wasm-bindgen](https://github.com/rustwasm/wasm-bindgen)
    este o opțiune populară.


    În capitolul următor, vom vorbi despre o tehnică de a apela dinamic funcții
    JavaScript și despre "garbage collection".
