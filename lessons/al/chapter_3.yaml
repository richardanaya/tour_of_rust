- title: Kapitulli 3 - Llojet bazë të strukturës së të dhënave/data-ve
  content_markdown: >
    Është koha të eksplorojmë përtej llojeve bazë! Në këtë kapitull do të shikojmë
     më strukturat e të dhënave

     me primitive në Rust, duke i kushtuar vëmendje paraqitjeve të tyre në
     memorie. Unë mendoj

     qe do të kënaqeni sa pak Rust fsheh nga ju se si funksionojnë gjërat.
- title: Strukturat
  content_markdown: >
   Një "struktur" është një koleksion fushash.


     Një *fushë* është thjesht një vlerë e të dhënave e lidhur me një strukturë të dhënash. Vlera e saj
     mund të jetë i një lloji primitiv ose një strukturë të dhënash.


     Përkufizimi i saj është si një plan për një përpilues se si të vendoset
     fusha në kujtesë pranë njëra-tjetrës.
  code: >-
https://play.rust-lang.org/?version=stable&mode=debug&edition=2021&code=struct%20SeaCreature%20%7B%0A%20%20%20%20%2F%2F%20String%20%C3%ABsht%C3%AB%20nj%C3%AB%20struktur%C3%AB%0A%20%20%20%20animal_type%3A%20String%2C%0A%20%20%20%20name%3A%20String%2C%0A%20%20%20%20arms%3A%20i32%2C%0A%20%20%20%20legs%3A%20i32%2C%0A%20%20%20%20weapon%3A%20String%2C%0A%7D)
- title: Metodat e thirrjes
  content_markdown: >
   Ndryshe nga funksionet, metodat janë funksione të lidhura me një të dhënë specifike
     lloji.


     **metodat statike** — metodat që i përkasin një lloji  vetvete thirren duke përdorur
     operatorin `::`.


     **metodat e shembullit** — metodat që i përkasin një shembulli të një lloji 
     thirren duke përdorur operatorin `.`.


     Ne do të flasim më shumë për krijimin e metodave tuaja në kapitujt e ardhshëm.
  code: >-
https://play.rust-lang.org/?version=stable&mode=debug&edition=2021&code=fn%20main()%20%7B%0A%20%20%20%20%2F%2F%20P%C3%ABrdorimi%20i%20nj%C3%AB%20metode%20statike%20p%C3%ABr%20krijimin%20e%20nj%C3%AB%20instance%20t%C3%AB%20String%0A%20%20%20%20let%20s%20%3D%20String%3A%3Afrom(%22P%C3%ABrshej%20bota!%22)%3B%0A%20%20%20%20%2F%2F%20P%C3%ABrdorimi%20i%20nj%C3%AB%20metode%20n%C3%AB%20instanc%C3%AB%0A%20%20%20%20println!(%22%7B%7D%20%C3%ABsht%C3%AB%20%7B%7D%20karaktere%20gjat%C3%AB.%22%2C%20s%2C%20s.len())%3B%0A%7D%0A)
- title: Memorja
  content_markdown: >
   Programet Rust kanë 3 rajone memorie ku ruhen të dhënat:

     * **memoria e të dhënave** - Për të dhënat që janë të fiksuara në madhësi dhe **statike** (d.m.th.
     gjithmonë i disponueshëm gjatë gjithë jetës së programit).
       Merrni parasysh tekstin në programin tuaj (p.sh. "Hello World!"): Bajtet e këtij teksti lexohen vetëm nga një vend
       dhe për këtë arsye mund të ruhet në këtë rajon. Përpiluesit bëjnë shumë optimizime
       me këtë lloj të dhënash, dhe ato përgjithësisht konsiderohen shumë të shpejta për t'u përdorur që nga ajo kohë
       vendndodhjet janë të njohura dhe të fiksuara.
     * **stack memorie** - Për të dhënat që deklarohen si variabla brenda 
     funksionit.
       Vendndodhja e kësaj memorie nuk ndryshon kurrë gjatë kohëzgjatjes së një thirrjeje funksioni; për shkak të këtij përpiluesit
       mund të optimizojë kodin në mënyrë që të dhënat e grumbullimit të jenë shumë të shpejta për t'u aksesuar.
     * **Memorie grumbull ** - Për të dhënat që krijohen ndërsa aplikacioni është
     ne vrapim.
       Të dhënat në këtë rajon mund të shtohen, zhvendosen, hiqen, ndryshohen përmasat, etj. Për shkak të
       natyres se tij dinamike përgjithësisht konsiderohet më e ngadaltë për t'u përdorur, por e lejon
       për perdorime shumë më kreative të kujtesës. Kur të dhënat shtohen në këtë rajon ne
       quajme atë një **alokim**. Kur të dhënat hiqen nga ky seksion, ne e quajmë atë a
       **shpërndarja/dealokim**.
- title: Krijimi i të dhënave në memorie
  content_markdown: >
    Kur ne **instantojmë** një **struktur** në kodin tonë programi ynë krijon
     të dhënat e fushës shoqëruese krah për krah në memorie.


     Ne instantojmë duke specifikuar të gjitha vlerat e fushës brenda


     `Emri i strukturës { ... }`.


     Fushat e strukturës aksesohen duke përdorur një operator me pika `.`.


     Detajet e kujtesës të shembullit tonë:

     * Teksti brenda thonjëzave është vetëm të dhëna për lexim (p.sh. "Ferris"), prandaj
     është
       vendosur në *regjionin e memories së të dhënave*.
     * Thirrja e funksionit `String::from` krijon një strukturë `String` që vendoset
     anësor
       krah për krah me fushat e SeaCreature në *stack*. Një varg paraqet tekst që mund të ndryshohet
       dhe e bën këtë duke:
       1. Krijimi i memories në *grumbull* për tekstin ku mund të modifikohet
       2. Ruajtja e një referimi në atë vendndodhje memorie në *grumbull* dhe ruajtja e saj në `String`
       struct (Më shumë për këtë në mësimet e ardhshme)
     * Më në fund dy miqtë tanë *Ferris* dhe *Sara* kanë struktura të dhënash që
     do të ketë gjithmonë
       vendndodhje fikse në programin tonë, kështu që ato vendosen në *stack*.
  code: >-
https://play.rust-lang.org/?version=stable&mode=debug&edition=2021&code=struct%20SeaCreature%20%7B%0A%20%20%20%20animal_type%3A%20String%2C%0A%20%20%20%20name%3A%20String%2C%0A%20%20%20%20arms%3A%20i32%2C%0A%20%20%20%20legs%3A%20i32%2C%0A%20%20%20%20weapon%3A%20String%2C%0A%7D%0A%0Afn%20main()%20%7B%0A%20%20%20%20%2F%2F%20T%C3%AB%20dhenat%20e%20SeaCreature%20jan%C3%AB%20n%C3%AB%20stack%0A%20%20%20%20let%20ferris%20%3D%20SeaCreature%20%7B%0A%20%20%20%20%20%20%20%20%2F%2F%20String%20struct%20%C3%ABsht%C3%AB%20gjithashtu%20n%C3%AB%20stack%2C%0A%20%20%20%20%20%20%20%20%2F%2F%20por%20mban%20nj%C3%AB%20referenc%C3%AB%20n%C3%AB%20t%C3%AB%20dh%C3%ABnat%20n%C3%AB%20heap%0A%20%20%20%20%20%20%20%20animal_type%3A%20String%3A%3Afrom(%22karkalec%22)%2C%0A%20%20%20%20%20%20%20%20name%3A%20String%3A%3Afrom(%22Ferris%22)%2C%0A%20%20%20%20%20%20%20%20arms%3A%202%2C%0A%20%20%20%20%20%20%20%20legs%3A%204%2C%0A%20%20%20%20%20%20%20%20weapon%3A%20String%3A%3Afrom(%22kong%22)%2C%0A%20%20%20%20%7D%3B%0A%0A%20%20%20%20let%20sarah%20%3D%20SeaCreature%20%7B%0A%20%20%20%20%20%20%20%20animal_type%3A%20String%3A%3Afrom(%22qent%22)%2C%0A%20%20%20%20%20%20%20%20name%3A%20String%3A%3Afrom(%22Sarah%22)%2C%0A%20%20%20%20%20%20%20%20arms%3A%208%2C%0A%20%20%20%20%20%20%20%20legs%3A%200%2C%0A%20%20%20%20%20%20%20%20weapon%3A%20String%3A%3Afrom(%22truri%22)%2C%0A%20%20%20%20%7D%3B%0A%20%20%20%20%0A%20%20%20%20println!(%0A%20%20%20%20%20%20%20%20%22%7B%7D%20%C3%ABsht%C3%AB%20nje%20%7B%7D.%20Ata%20kan%C3%AB%20%7B%7D%20krah%C3%AB%2C%20%7B%7D%20kembe%2C%20dhe%20nje%20%7B%7D%20arm%C3%AB%22%2C%0A%20%20%20%20%20%20%20%20ferris.name%2C%20ferris.animal_type%2C%20ferris.arms%2C%20ferris.legs%2C%20ferris.weapon%0A%20%20%20%20)%3B%0A%20%20%20%20println!(%0A%20%20%20%20%20%20%20%20%22%7B%7D%20%C3%ABsht%C3%AB%20nje%20%7B%7D.%20Ata%20kan%C3%AB%20%7B%7D%20krah%C3%AB%2C%20dhe%20%7B%7D%20kembe.%20Nuk%20kan%C3%AB%20arme..%22%2C%0A%20%20%20%20%20%20%20%20sarah.name%2C%20sarah.animal_type%2C%20sarah.arms%2C%20sarah.legs%0A%20%20%20%20)%3B%0A%7D)
- title: Struktura të ngjashme me tufë
  content_markdown: |
   Për koncizitet, mund të krijoni struktura që përdoren si një tufë.
  code: >-
https://play.rust-lang.org/?version=stable&mode=debug&edition=2021&code=struct%20Location(i32%2C%20i32)%3B%0A%0Afn%20main()%20%7B%0A%20%20%20%20%2F%2F%20Kjo%20%C3%ABsht%C3%AB%20ende%20nj%C3%AB%20strukture%20n%C3%AB%20stack%0A%20%20%20%20let%20loc%20%3D%20Location(42%2C%2032)%3B%0A%20%20%20%20println!(%22%7B%7D%2C%20%7B%7D%22%2C%20loc.0%2C%20loc.1)%3B%0A%7D
- title: Struktura të ngjashme me njësinë
  content_markdown: >
    Strukturat edhe nuk duhet të kenë fare fusha.


     Siç u përmend në Kapitullin 1, një *njësi* është një fjalë tjetër për një tuple bosh `()`.
     Kjo është arsyeja pse ky lloj strukture quhet *Unit-like*.


     Ky lloj strukture përdoret rrallë.
  code: >-
https://play.rust-lang.org/?version=stable&mode=debug&edition=2021&code=struct%20Marker%3B%0A%0Afn%20main()%20%7B%0A%20%20%20%20let%20_m%20%3D%20Marker%3B%0A%7D)
- title: Enumeracionet
  content_markdown: >
    Enumerimet ju lejojnë të krijoni një lloj të ri që mund të ketë një vlerë prej disa
     elementë te etiketuar duke përdorur fjalën kyçe "enum".


     "match" ndihmon në sigurimin e trajtimit shterues të të gjitha bërjes së vlerave të mundshme të numrit
     është një mjet i fuqishëm për të siguruar kod cilësor.
  code: >-
https://play.rust-lang.org/?version=stable&mode=debug&edition=2021&code=%23!%5Blejohet(dead_code)%5D%20%2F%2F%20ky%20rresht%20parandalon%20sinjalizimet%20e%20kompiluesit%0A%0Aenum%20Lloji%20%7B%0A%20%20%20%20Karkalec%2C%0A%20%20%20%20Zogu%20i%20detit%2C%0A%20%20%20%20Peshku%2C%0A%20%20%20%20Palura%0A%7D%0A%0Astruct%20KrijesaDeti%20%7B%0A%20%20%20%20lloji%3A%20Lloji%2C%0A%20%20%20%20emri%3A%20String%2C%0A%20%20%20%20krah%C3%ABt%3A%20i32%2C%0A%20%20%20%20kembe%3A%20i32%2C%0A%20%20%20%20arm%C3%ABt%3A%20String%2C%0A%7D%0A%0Afn%20main()%20%7B%0A%20%20%20%20let%20ferris%20%3D%20KrijesaDeti%20%7B%0A%20%20%20%20%20%20%20%20lloji%3A%20Lloji%3A%3AKarkalec%2C%0A%20%20%20%20%20%20%20%20emri%3A%20String%3A%3Afrom(%22Ferris%22)%2C%0A%20%20%20%20%20%20%20%20krah%C3%ABt%3A%202%2C%0A%20%20%20%20%20%20%20%20kembe%3A%204%2C%0A%20%20%20%20%20%20%20%20arm%C3%ABt%3A%20String%3A%3Afrom(%22kam%C3%ABy%22)%2C%0A%20%20%20%20%7D%3B%0A%0A%20%20%20%20match%20ferris.lloji%20%7B%0A%20%20%20%20%20%20%20%20Lloji%3A%3AKarkalec%20%3D%3E%20println!(%22%7B%7D%20%C3%ABsht%C3%AB%20nj%C3%AB%20karkalec%22%2Cferris.emri)%2C%0A%20%20%20%20%20%20%20%20Lloji%3A%3AZogu%20i%20detit%20%3D%3E%20println!(%22%7B%7D%20%C3%ABsht%C3%AB%20nj%C3%AB%20zog%20i%20detit%22%2Cferris.emri)%2C%0A%20%20%20%20%20%20%20%20Lloji%3A%3APeshku%20%3D%3E%20println!(%22%7B%7D%20%C3%ABsht%C3%AB%20nj%C3%AB%20peshk%22%2Cferris.emri)%2C%0A%20%20%20%20%20%20%20%20Lloji%3A%3APalura%20%3D%3E%20println!(%22%7B%7D%20%C3%ABsht%C3%AB%20nj%C3%AB%20palur%C3%AB%22%2Cferris.emri)%2C%0A%20%20%20%20%7D%0A%7D)
- title: Enumerations With Data
  content_markdown: >
    Elementet "enum" mund të kenë gjithashtu një ose më shumë lloje të dhënash që i lejojnë ata të sillen
     si *union* nga C.


     Kur një model "enum" përputhet duke përdorur "match", ju mund të lidhni një ndryshore
     emër për secilën vlerë të të dhënave.


     Detajet e memories së `enum`:

     * Një vlerë e të dhënave enum do të ketë një madhësi memorie të barabartë me elementin e saj më të madh.
     Kjo lejon që të gjitha vlerat potenciale të përshtaten në të njëjtën hapësirë të memories.

     * Përveç llojeve të të dhënave të elementit (nëse ka), çdo element ka gjithashtu një
     vlerë numerike që përfaqëson se cili etiketë është.


     Detaje të tjera:

     * 'Enum' i Rust është diçka e njohur gjithashtu si një bashkim *etiketuar*.

     * Kombinimi i llojeve për të krijuar një lloj të ri është ajo që njerëzit nënkuptojnë kur ata
     Ndryshku ka *lloje algjebrike*.
  code: >-
https://play.rust-lang.org/?version=stable&mode=debug&edition=2021&code=%23!%5Blejohet(dead_code)%5D%20%2F%2F%20ky%20rresht%20parandalon%20sinjalizimet%20e%20kompiluesit%0A%0Aenum%20Lloji%20%7B%20Karkalec%2C%20Zogu%20i%20detit%2C%20Peshku%2C%20Palura%20%7D%0Aenum%20LlojiVeneni%20%7B%20Acid%2C%20Dhimbshme%2C%20Vdekjeprurese%20%7D%0Aenum%20Madhesia%20%7B%20Madhe%2C%20Vogel%20%7D%0Aenum%20Arma%20%7B%0A%20%20%20%20Krah%28i32%2C%20Madhesia%29%2C%0A%20%20%20%20Venin%28LlojiVeneni%29%2C%0A%20%20%20%20Asnje%0A%7D%0A%0Astruct%20KrijesaDeti%20%7B%0A%20%20%20%20lloji%3A%20Lloji%2C%0A%20%20%20%20emri%3A%20String%2C%0A%20%20%20%20krah%C3%ABt%3A%20i32%2C%0A%20%20%20%20kembe%3A%20i32%2C%0A%20%20%20%20arma%3A%20Arma%2C%0A%7D%0A%0Afn%20main()%20%7B%0A%20%20%20%20%2F%2F%20Te%20dhenat%20e%20Krijes%D0%91eDeti%20jane%20ne%20stek%0A%20%20%20%20let%20ferris%20%3D%20KrijesaDeti%20%7B%0A%20%20%20%20%20%20%20%20%2F%2F%20Struktura%20String%20gjithashtu%20eshte%20ne%20stek%2C%0A%20%20%20%20%20%20%20%20%2F%2F%20por%20mban%20nje%20referenc%20ne%20te%20dhena%20ne%20heap%0A%20%20%20%20%20%20%20%20lloji%3A%20Lloji%3A%3AKarkalec%2C%0A%20%20%20%20%20%20%20%20emri%3A%20String%3A%3Afrom(%22Ferris%22)%2C%0A%20%20%20%20%20%20%20%20krah%C3%ABt%3A%202%2C%0A%20%20%20%20%20%20%20%20kembe%3A%204%2C%0A%20%20%20%20%20%20%20%20arma%3A%20Arma%3A%3AKrah(2%2C%20Madhesia%3A%3AVogel)%2C%0A%20%20%20%20%7D%3B%0A%0A%20%20%20%20match%20ferris.lloji%20%7B%0A%20%20%20%20%20%20%20%20Lloji%3A%3AKarkalec%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20match%20ferris.arma%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20Arma%3A%3AKrah(nr_krah%C3%ABve%2Cmadhesia)%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20let%20pershkrim_madh%C3%ABsie%20%3D%20match%20madhesia%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20Madhesia%3A%3AMadhe%20%3D%3E%20%22madhe%22%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20Madhesia%3A%3AVogel%20%3D%3E%20%22vogel%22%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20println!(%22ferris%20%C3%ABsht%C3%AB%20nj%C3%AB%20karkalec%20me%20%7B%7D%20%7B%7D%20krah%C3%AB%22%2C%20nr_krah%C3%ABve%2C%20pershkrim_madh%C3%ABsie)%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20_%20%3D%3E%20println!(%22ferris%20%C3%ABsht%C3%AB%20nj%C3%AB%20karkalec%20me%20nj%C3%AB%20arm%C3%AB%20tjet%C3%ABr%22)%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20_%20%3D%3E%20println!(%22ferris%20%C3%ABsht%C3%AB%20nj%C3%AB%20kafsh%C3%AB%20tjet%C3%ABr%22)%2C%0A%20%20%20%20%7D%0A%7D)
- title: Kapitulli 3 - Konkluzion
  content_markdown: >
    Sa emocionuese! Tani kemi mjetet më themelore për përfaqësimin e formës së
     ideve tona në kod. Shpresojmë tani ne 

     mund të shohim një dritë sesi funksionet themelore të Rust funksionojnë në harmoni dhe
     koncizitet me llojet e tij. Në vazhdim do të flasim për

     një koncept që u jep llojeve tona të të dhënave edhe më shumë fleksibilitet të përfaqësimit:
     *gjenerike*.
