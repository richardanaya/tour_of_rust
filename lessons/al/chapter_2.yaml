- title: Kapitulli 2 - Rrjedha e kontrollit bazë
  content_markdown: >
   Në këtë kapitull le të flasim për metodat bazë të kontrollit të rrjedhës në Rust.

     Nëse jeni të njohur me gjuhët e bazuara në C, do të ndiheni si në shtëpi dhe
     ndoshta

     shijoni një ose dy surpriza.
- title: if/else
  content_markdown: >
    Degëzimi i kodit në Rust nuk është befasues.


     Kushtet nuk kanë kllapa! A kemi pasur vërtet nevojë për to? Logjika jonë
     tani duket bukur dhe e pastër.


     Të gjithë operatorët tuaj të zakonshëm relacionalë dhe logjikë ende funksionojnë: `==`, `!=`, `<`,
    `>`, `<=`, `>=`, `!`, `||`, `&&`.
  code: >-
https://play.rust-lang.org/?version=stable&mode=debug&edition=2021&code=fn%20main()%20%7B%0A%20%20%20%20let%20x%20%3D%2042%3B%0A%20%20%20%20if%20x%20%3C%2042%20%7B%0A%20%20%20%20%20%20%20%20println!(%22M%C3%AB%20pak%20se%2042%22)%3B%0A%20%20%20%20%7D%20else%20if%20x%20%3D%3D%2042%20%7B%0A%20%20%20%20%20%20%20%20println!(%22%C3%8Bsht%C3%AB%2042%22)%3B%0A%20%20%20%20%7D%20else%20%7B%0A%20%20%20%20%20%20%20%20println!(%22M%C3%AB%20shum%C3%AB%20se%2042%22)%3B%0A%20%20%20%20%7D%0A%7D)
- title: loop/lak
  content_markdown: |
   Keni nevojë për një lak të pafund?

     Rust e bën të lehtë.

     'break' do t'i shpëtojë një lak kur të jeni gati.

     "loop" ka një sekret për të cilin do të flasim së shpejti.
  code: >-
ttps://play.rust-lang.org/?version=stable&mode=debug&edition=2021&code=fn%20main()%20%7B%0A%20%20%20%20let%20mut%20x%20%3D%200%3B%0A%20%20%20%20loop%20%7B%0A%20%20%20%20%20%20%20%20x%20%2B%3D%201%3B%0A%20%20%20%20%20%20%20%20if%20x%20%3D%3D%2042%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20break%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%20%20%20%20println!(%22%7B%7D%22%2C%20x)%3B%0A%7D
- title: while
  content_markdown: |
    "while" ju lejon të shtoni me lehtësi një kusht në një lak.

     Nëse kushti vlerësohet në "false", cikli do të dalë.
  code: >-
https://play.rust-lang.org/?version=stable&mode=debug&edition=2021&code=fn%20main()%20%7B%0A%20%20%20%20let%20mut%20x%20%3D%200%3B%0A%20%20%20%20while%20x%20!%3D%2042%20%7B%0A%20%20%20%20%20%20%20%20x%20%2B%3D%201%3B%0A%20%20%20%20%7D%0A%20%20%20%20println!(%22x%20is%20%7B%7D%22%2C%20x)%3B%0A%7D)
- title: for
  content_markdown: >
    Cikli 'for' i Rust është një përmirësim i fuqishëm. Ajo

     përsëritet mbi vlera nga çdo shprehje që vlerësohet në një përsëritës.
     Çfarë është

     një përsëritës? Një përsëritës është një objekt që mund të bëni pyetjen "Çfarë është
     

     artikulli tjetër qe keni?" derisa të mos ketë më artikuj.


     Ne do ta shqyrtojmë këtë më shumë në një kapitull të ardhshëm. Ndërkohë, njihni Rust
     bën

     te lehtë të krijohen përsëritës që gjenerojnë një sekuencë numrash të plotë.


     Operatori `..` krijon një përsëritës që gjeneron numra nga fillimi
     numri deri në

     por duke mos përfshirë një numër fundor.


     Operatori `..=` krijon një përsëritës që gjeneron numra nga fillimi
     numri deri në

     dhe duke përfshirë një numër fundor.
  code: >-
https://play.rust-lang.org/?version=stable&mode=debug&edition=2021&code=fn%20main()%20%7B%0A%20%20%20%20for%20x%20in%200..5%20%7B%0A%20%20%20%20%20%20%20%20println!(%22%7B%7D%22%2C%20x)%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20for%20x%20in%200..%3D5%20%7B%0A%20%20%20%20%20%20%20%20println!(%22%7B%7D%22%2C%20x)%3B%0A%20%20%20%20%7D%0A%7D)
- title: match
  content_markdown: >
    Të mungon deklarata switch? Rust ka një fjalë kyçe tepër të dobishme

     për përputhjen e të gjitha kushteve të mundshme të një vlere dhe ekzekutimin e një shtegu kodi nëse
     

     ndeshja është e vërtetë. Le të shohim se si funksionon kjo për numrat. Do të kemi më shumë per te
     thene

     në kapitujt e ardhshëm mbi përputhjen e modelit të të dhënave më komplekse. Ju premtoj
     do

     ia vlej pritja.


     "match" është shteruese, kështu që të gjitha rastet

     duhen trajtuar.


     Përputhja e kombinuar me destrukturimin është padyshim një nga

     modelet më të zakonshme që do të shihni në të gjithë Rust.
  code: >-
https://play.rust-lang.org/?version=stable&mode=debug&edition=2021&code=fn%20main()%20%7B%0A%20%20%20%20let%20x%20%3D%2042%3B%0A%0A%20%20%20%20match%20x%20%7B%0A%20%20%20%20%20%20%20%200%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20println!(%22gjeta%20zero%22)%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%2F%2F%20mund%20t%C3%AB%20p%C3%ABrputhet%20me%20shum%C3%AB%20vlera%0A%20%20%20%20%20%20%20%201%20%7C%202%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20println!(%22gjeta%201%20ose%202!%22)%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%2F%2F%20mund%20t%C3%AB%20p%C3%ABrputhet%20me%20interval%0A%20%20%20%20%20%20%20%203..%3D9%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20println!(%22gjeta%20nj%C3%AB%20num%C3%ABr%20nga%203%20deri%20n%C3%AB%209%20p%C3%ABrfshir%C3%AB%22)%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%2F%2F%20mund%20t%C3%AB%20lidhet%20numri%20gjetur%20me%20nj%C3%AB%20variab%C3%ABl%0A%20%20%20%20%20%20%20%20numri_gjetur%20%40%2010..%3D100%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20println!(%22gjeta%20numrin%20nga%2010%20deri%20n%C3%AB%20100!%22%2C%20numri_gjetur)%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%2F%2F%20kjo%20%C3%ABsht%C3%AB%20nje%20lidhje%20e%20p%C3%ABrgjithshme%20q%C3%AB%20duhet%20t%C3%AB%20ekzistoj%C3%AB%20n%C3%AB%20rast%20se%20t%C3%AB%20gjitha%20rastet%20nuk%20jan%C3%AB%20t%C3%AB%20mbuluara%0A%20%20%20%20%20%20%20%20_%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20println!(%22gjeta%20di%C3%A7ka%20tjet%C3%ABr!%22)%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%7D)
- title: Kthimi i nje vlere nga loop-i
  content_markdown: |
    `loop` mund te ndaloje (break) qe te ktheje nje vlere.
  code: >-
https://play.rust-lang.org/?version=stable&mode=debug&edition=2021&code=fn%20main()%20%7B%0A%20%20%20%20let%20mut%20x%20%3D%200%3B%0A%20%20%20%20let%20v%20%3D%20loop%20%7B%0A%20%20%20%20%20%20%20%20x%20%2B%3D%201%3B%0A%20%20%20%20%20%20%20%20if%20x%20%3D%3D%2013%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20break%20%22gjeta%20numrin%2013%22%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%3B%0A%20%20%20%20println!(%22nga%20loop%3A%20%7B%7D%22%2C%20v)%3B%0A%7D%0A)
- title: Kthimi i vlerave nga shprehjet e bllokut
  content_markdown: >
    `if`, `match`, funksionet dhe blloqet e fushëveprimit kanë të gjitha një mënyrë unike
     kthimin e vlerave në Rust.


     Nëse deklarata e fundit në një bllok "if", "match", funksion ose fushëveprimi është një
     shprehje pa

      `;`, Rust do ta kthejë atë si vlerë nga blloku. Kjo

     është një mënyrë e shkëlqyer për të krijuar logjikë koncize që kthen një vlerë që mund të vendoset
     në

     një ndryshore te re.


     Vini re se ai gjithashtu lejon që një deklaratë "if" të funksionojë si një konciz
     shprehje treshe.
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=fn%20example()%20-%3E%20i32%20%7B%0A%20%20%20%20let%20x%20%3D%2042%3B%0A%20%20%20%20%2F%2F%20Rust's%20ternary%20expression%0A%20%20%20%20let%20v%20%3D%20if%20x%20%3C%2042%20%7B%20-1%20%7D%20else%20%7B%201%20%7D%3B%0A%20%20%20%20println!(%22from%20if%3A%20%7B%7D%22%2C%20v)%3B%0A%0A%20%20%20%20let%20food%20%3D%20%22hamburger%22%3B%0A%20%20%20%20let%20result%20%3D%20match%20food%20%7B%0A%20%20%20%20%20%20%20%20%22hotdog%22%20%3D%3E%20%22is%20hotdog%22%2C%0A%20%20%20%20%20%20%20%20%2F%2F%20notice%20the%20braces%20are%20optional%20when%20its%20just%20a%20single%20return%20expression%0A%20%20%20%20%20%20%20%20_%20%3D%3E%20%22is%20not%20hotdog%22%2C%0A%20%20%20%20%7D%3B%0A%20%20%20%20println!(%22identifying%20food%3A%20%7B%7D%22%2C%20result)%3B%0A%0A%20%20%20%20let%20v%20%3D%20%7B%0A%20%20%20%20%20%20%20%20%2F%2F%20This%20scope%20block%20lets%20us%20get%20a%20result%20without%20polluting%20function%20scope%0A%20%20%20%20%20%20%20%20let%20a%20%3D%201%3B%0A%20%20%20%20%20%20%20%20let%20b%20%3D%202%3B%0A%20%20%20%20%20%20%20%20a%20%2B%20b%0A%20%20%20%20%7D%3B%0A%20%20%20%20println!(%22from%20block%3A%20%7B%7D%22%2C%20v)%3B%0A%0A%20%20%20%20%2F%2F%20The%20idiomatic%20way%20to%20return%20a%20value%20in%20rust%20from%20a%20function%20at%20the%20end%0A%20%20%20%20v%20%2B%204%0A%7D%0A%0Afn%20main()%20%7B%0A%20%20%20%20println!(%22from%20function%3A%20%7B%7D%22%2C%20example())%3B%0A%7D%0A
- title: Kapitull 2 - Konkluzion
  content_markdown: >
    Shpresoj se kam treguar një paraqitje të shkurtër të fuqisë së Rustit edhe në shumicën e rasteve

     veçoritë themelore të gjuhës. Do të flasim për "for" dhe

     'match' edhe më në thellësi pasi fitojmë më shumë njohuri për këtë

     mund të shfrytëzojnë aftësitë e tyre. Herën tjetër do të futemi në themelet e Rust
  

     strukturat e data-ve.
