- title: Capitolul 2 - Controlul de bază al fluxului
  content_markdown: >
    În acest capitol vom vorbi despre metodele de bază de control ale fluxului în Rust.

    Dacă sunteți familiar cu limbaje bazate pe C, o să vă simțiți ca acasă și
    poate

    vă veți bucura de o surpriză sau două.
- title: if/else
  content_markdown: >
    Ramificarea codului în Rust nu este surprinzătoare.


    Condițiile nu au nevoie de paranteze! Am avut vreodată de fapt nevoie de ele? Logica noastră
    poate arăta acum frumos și curat.


    În rest, toți operatorii relaționali și logici funcționează la fel: `==`, `!=`, `<`,
    `>`, `<=`, `>=`, `!`, `||`, `&&`.
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=fn%20main()%20%7B%0A%20%20%20%20let%20x%20%3D%2042%3B%0A%20%20%20%20if%20x%20%3C%2042%20%7B%0A%20%20%20%20%20%20%20%20println!(%22mai%20pu%C8%9Bin%20de%2042%22)%3B%0A%20%20%20%20%7D%20else%20if%20x%20%3D%3D%2042%20%7B%0A%20%20%20%20%20%20%20%20println!(%22egal%20cu%2042%22)%3B%0A%20%20%20%20%7D%20else%20%7B%0A%20%20%20%20%20%20%20%20println!(%22mare%20mare%20de%2042%22)%3B%0A%20%20%20%20%7D%0A%7D
- title: Bucle
  content_markdown: |
    Aveți nevoie de o buclă infinită?

    Rust face asta într-un mod foarte simplu.

    `break` vă va arunca în afara buclei când sunteți pregătit.

    `loop` are un secret despre care vom vorbi curând.
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=fn%20main()%20%7B%0A%20%20%20%20let%20mut%20x%20%3D%200%3B%0A%20%20%20%20loop%20%7B%0A%20%20%20%20%20%20%20%20x%20%2B%3D%201%3B%0A%20%20%20%20%20%20%20%20if%20x%20%3D%3D%2042%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20break%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%20%20%20%20println!(%22%7B%7D%22%2C%20x)%3B%0A%7D%0A
- title: while
  content_markdown: |
    `while` vă lasă să adăugați o condiție logică unei bucle.

    Dacă condiția impusă buclei devine falsă, bucla se va termina.
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=fn%20main()%20%7B%0A%20%20%20%20let%20mut%20x%20%3D%200%3B%0A%20%20%20%20while%20x%20!%3D%2042%20%7B%0A%20%20%20%20%20%20%20%20x%20%2B%3D%201%3B%0A%20%20%20%20%7D%0A%20%20%20%20println!(%22x%20este%20%7B%7D%22%2C%20x)%3B%0A%7D%0A
- title: for
  content_markdown: >
    Bucla `for` din Rust e o îmbunătățire importantă. Ea

    iterează peste valorile oricărei expresii care poate fi transformată într-un iterator.
    Vă întrebați

    ce este un iterator? Un iterator este un obiect pe care îl puteți întreba "Care este

    următorul element pe care îl ai?" până când acesta nu mai are elemente.


    Vom explora acest lucru într-un capitol viitor. Între timp, țineți minte că Rust
    poate

    crea ușor iteratori care generează o secvență de numere întregi.


    Operatorul `..` creează un iterator care generează numere de la un
    număr până la

    alt număr, din unu în unu, fără să îl includă pe cel din urmă.


    Operatorul `..=` creează un iterator care generează numere de la un
    număr până la

    alt număr, din unu în unu, inclusiv cel din urmă.
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=fn%20main()%20%7B%0A%20%20%20%20for%20x%20in%200..5%20%7B%0A%20%20%20%20%20%20%20%20println!(%22%7B%7D%22%2C%20x)%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20for%20x%20in%200..%3D5%20%7B%0A%20%20%20%20%20%20%20%20println!(%22%7B%7D%22%2C%20x)%3B%0A%20%20%20%20%7D%0A%7D%0A
- title: match
  content_markdown: >
    Vă lipsește `switch`-ul din C? Rust are un cuvânt cheie incredibil de folositor

    pentru analiza tuturor valorilor posibile ale unei variabile și executarea unei bucăți de cod dacă
    o anumită

    valoare corespunde condițiilor puse. Hai să vedem cum merge asta pentru numere. Avem de discutat mai
    multe

    în capitolele viitoare despre potrivirea șabloanelor (*pattern matching*) pentru date mai complexe. Vă promit că

    va merita așteptarea.


    `match` este exhaustiv, deci toate cazurile

    trebuie să fie abordate și implementate.


    Matching, combinat cu destructurarea datelor, este de departe unul din

    cele mai întâlnite șabloane de programare pe care le veți vedea în Rust.
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=fn%20main()%20%7B%0A%20%20%20%20let%20x%20%3D%2042%3B%0A%0A%20%20%20%20match%20x%20%7B%0A%20%20%20%20%20%20%20%200%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20println!(%22am%20g%C4%83sit%20zero%22)%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%2F%2F%20putem%20face%20un%20caz%20pentru%20mai%20multe%20valori%0A%20%20%20%20%20%20%20%201%20%7C%202%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20println!(%22am%20g%C4%83sit%201%20sau%202!%22)%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%2F%2F%20putem%20face%20un%20caz%20pentru%20o%20mul%C8%9Bime%0A%20%20%20%20%20%20%20%203..%3D9%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20println!(%22am%20g%C4%83sit%20un%20num%C4%83r%20%C3%AEntre%203%20%C8%99i%209%20inclusiv%22)%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%2F%2F%20putem%20pune%20num%C4%83rul%20care%20respect%C4%83%20cazul%20%C3%AEntr-o%20variabil%C4%83%0A%20%20%20%20%20%20%20%20matched_num%20%40%2010..%3D100%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20println!(%22am%20g%C4%83sit%20num%C4%83rul%20%7B%7D%20%C3%AEntre%2010%20%C8%99i%20100!%22%2C%20matched_num)%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%2F%2F%20acesta%20este%20cazul%20implicit%20care%20trebuie%20s%C4%83%20existe%20dac%C4%83%0A%20%20%20%20%20%20%20%20%2F%2F%20nu%20sunt%20abordate%20toate%20cazurile%20posibile%0A%20%20%20%20%20%20%20%20_%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20println!(%22am%20g%C4%83sit%20alt%20num%C4%83r!%22)%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%7D%0A
- title: Returnarea unor valori dintr-o buclă
  content_markdown: |
    `loop` poate fi oprit pentru a returna o valoare.
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=fn%20main()%20%7B%0A%20%20%20%20let%20mut%20x%20%3D%200%3B%0A%20%20%20%20let%20v%20%3D%20loop%20%7B%0A%20%20%20%20%20%20%20%20x%20%2B%3D%201%3B%0A%20%20%20%20%20%20%20%20if%20x%20%3D%3D%2013%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20break%20%22am%20g%C4%83sit%2013%22%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%3B%0A%20%20%20%20println!(%22din%20bucl%C4%83%3A%20%7B%7D%22%2C%20v)%3B%0A%7D%0A
- title: Returnarea unor valori din expresii bloc
  content_markdown: >
    `if`-urile, `match`-urile, funcțiile și domeniile bloc au un mod unic de
    a returna valori în Rust.


    Dacă ultima instrucțiune din interiorul unui/unei `if`, `match`, funcții sau domeniu bloc este o
    expresie fără

    `;`, Rust o va returna sub forma unei valori din acel bloc. Acesta

    este un mod foarte bun de a crea o logică concisă care returnează o valoare care poate fi pusă
    într-o

    variabilă nouă.


    Observăm cum acest lucru permite unui `if` să funcționeze ca o expresie ternară concisă.
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=fn%20example()%20-%3E%20i32%20%7B%0A%20%20%20%20let%20x%20%3D%2042%3B%0A%20%20%20%20%2F%2F%20expresia%20ternar%C4%83%20concis%C4%83%0A%20%20%20%20let%20v%20%3D%20if%20x%20%3C%2042%20%7B%20-1%20%7D%20else%20%7B%201%20%7D%3B%0A%20%20%20%20println!(%22din%20if%3A%20%7B%7D%22%2C%20v)%3B%0A%0A%20%20%20%20let%20food%20%3D%20%22hamburger%22%3B%0A%20%20%20%20let%20result%20%3D%20match%20food%20%7B%0A%20%20%20%20%20%20%20%20%22hotdog%22%20%3D%3E%20%22este%20un%20hotdog%22%2C%0A%20%20%20%20%20%20%20%20%2F%2F%20observa%C8%9Bi%20c%C4%83%20acoladele%20sunt%20op%C8%9Bionale%20c%C3%A2nd%20exist%C4%83%0A%20%20%20%20%20%20%20%20%2F%2F%20o%20expresie%20simpl%C4%83%20de%20returnare%0A%20%20%20%20%20%20%20%20_%20%3D%3E%20%22nu%20este%20un%20hotdog%22%2C%0A%20%20%20%20%7D%3B%0A%20%20%20%20println!(%22tipul%20de%20m%C3%A2ncare%3A%20%7B%7D%22%2C%20result)%3B%0A%0A%20%20%20%20let%20v%20%3D%20%7B%0A%20%20%20%20%20%20%20%20%2F%2F%20Acest%20domeniu%20de%20vizibilitate%20ne%20permite%20s%C4%83%20nu%20polu%C4%83m%20spa%C8%9Biul%20func%C8%9Biilor%0A%20%20%20%20%20%20%20%20let%20a%20%3D%201%3B%0A%20%20%20%20%20%20%20%20let%20b%20%3D%202%3B%0A%20%20%20%20%20%20%20%20a%20%2B%20b%0A%20%20%20%20%7D%3B%0A%20%20%20%20println!(%22din%20bloc%3A%20%7B%7D%22%2C%20v)%3B%0A%0A%20%20%20%20%2F%2F%20Modul%20idiomatic%20de%20a%20returna%20o%20valoare%20%C3%AEn%20Rust%20la%20sf%C3%A2%C8%99itul%20unei%20func%C8%9Bii%0A%20%20%20%20v%20%2B%204%0A%7D%0A%0Afn%20main()%20%7B%0A%20%20%20%20println!(%22din%20func%C8%9Bie%3A%20%7B%7D%22%2C%20example())%3B%0A%7D%0A
- title: Capitolul 2 - Concluzie
  content_markdown: >
    Sper că v-am arătat o părticică din puterea Rust-ului chiar și prin cele mai

    simple caracteristici ale unui limbaj de programare. Vom vorbi despre `for` și

    `match` și mai mult pe măsură ce acumulăm mai multe cunoștințe care

    ne pot ajuta să ne folosim de capabilitățile lor. În cele ce urmează o să aruncăm o privire peste structurile
    de date fundamentale

    din Rust.
