- title: 第六章 - 文字
  content_markdown: >
    現在我們稍微了解 Rust 的記憶體了，我們準備更詳細的討論文字。

    Rust 非常在意國際語言，及從位元組 (byte) 層面來看，你可能不是那麼熟悉的語言。
    即是，Rust 有很多很棒的工具用來管理這些問題。
- title: 字串常量 (string literals)
  content_markdown: >
    字串常量總是以萬國碼 (unicode) 表示。


    字串常量型別為 `&'static str`：


    * `&` 表示它參考到記憶體裡某個位址，且因為沒有 `&mut` 所以表示編譯器不允許它被修改

    * `'static` 表示字串資料將一直存活到我們的程式結束為止 (它永不會徹下)

    * `str` 表示它指向一連串的位元組 (bytes)，且總是合法的 **utf-8**


    記憶體細節：

    * Rust 編譯器將會很有可能將你的字串放在程式記憶體的資料區間裡
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=fn%20main()%20%7B%0A%20%20%20%20let%20a%3A%20%26'static%20str%20%3D%20%22hi%20%F0%9F%A6%80%22%3B%0A%20%20%20%20println!(%22%7B%7D%20%7B%7D%22%2C%20a%2C%20a.len())%3B%0A%7D%0A
- title: 什麼是 utf-8
  content_markdown: "隨著越來越多語言在電腦上使用，這個世界就需要顯示更多文字字元，而不是單單 ASCII 允許的 1 個位元、256 個字元。\n\n**utf-8** 以有著 1-4 個位元組的可變長度登場，這大幅增加可能的字元。\n\n使用可變長度有個優勢是，對於那些常用的 ASCII (在 **utf-8** 裡仍只需要一個位元組)，文字將不會有不必要的位元組。\n\n可變長度的缺點是，查找字元時無法快速地 (**O(1)** 常數時間) 用索引完成 (例如：`my_text[3]` 以取得第 4 個元)。\n的確有可能在前面的字元可以有可變的寬度，修改第 4 個字元事實上是從第一個位元組開始。\n\n取而代之的是，我們必定得迭代整個 **utf-8** 位元序列，才有辦法知道萬國碼是從哪裡開始 (**O(n)** 線性時間)。\n\nFerris：「我非常高興有 **utf-8** 可以用 emoji 來表示我的水底朋友們。」\"\n\n<span class=\"emoji\">\U0001F420\U0001F419\U0001F41F\U0001F42C\U0001F40B</span>\n"
- title: 跳脫字元
  content_markdown: >
    在畫面上要表示某些特定的字元是非常有挑戰性的，所以 **跳脫符號** (escape codes) 允許我們用一個符號來表示。


    Rust 支援 C 語言相關的跳脫符號：

    * `\n` - 換行 (newline)

    * `\r` - 回車 (carriage return)

    * `\t` - tab

    * `\\` - 反斜線 (backslash)

    * `\0` - 空字元 (null)

    * `\'` - 單引號 (single-quote)


    完整列表在[這裡](https://doc.rust-lang.org/reference/tokens.html).
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=fn%20main()%20%7B%0A%20%20%20%20let%20a%3A%20%26%27static%20str%20%3D%20%22Ferris%20says%3A%5Ct%5C%22hello%5C%22%22%3B%0A%20%20%20%20println!(%22%7B%7D%22%2Ca)%3B%0A%7D%0A
- title: 多行字串常量
  content_markdown: |
    Rust 字串預設是多行的。

    如果你不想要換行，在行尾使用一個 `\` 就可以達成。
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=fn%20main()%20%7B%0A%20%20%20%20let%20haiku%3A%20%26'static%20str%20%3D%20%22%0A%20%20%20%20%20%20%20%20I%20write%2C%20erase%2C%20rewrite%0A%20%20%20%20%20%20%20%20Erase%20again%2C%20and%20then%0A%20%20%20%20%20%20%20%20A%20poppy%20blooms.%0A%20%20%20%20%20%20%20%20-%20Tachibana%20Hokushi%22%3B%0A%20%20%20%20println!(%22%7B%7D%22%2C%20haiku)%3B%0A%20%20%20%20%0A%20%20%20%20%0A%20%20%20%20println!(%22hello%20%5C%0A%20%20%20%20world%22)%20%2F%2F%20notice%20that%20the%20spacing%20before%20w%20is%20ignored%0A%7D%0A
- title: 原始字串常量 (raw string literals)
  content_markdown: >
    在開頭使用 `r#"` 且結尾使用 `"#`，就可以使用原始字串常量，它允許我們逐字寫下一連串的字元。
    它讓我們可以插入一些可能會跟一般字串搞混的字元 (例如雙引號或是反斜線)。
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=fn%20main()%20%7B%0A%20%20%20%20let%20a%3A%20%26'static%20str%20%3D%20r%23%22%0A%20%20%20%20%20%20%20%20%3Cdiv%20class%3D%22advice%22%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20Raw%20strings%20are%20useful%20for%20some%20situations.%0A%20%20%20%20%20%20%20%20%3C%2Fdiv%3E%0A%20%20%20%20%20%20%20%20%22%23%3B%0A%20%20%20%20println!(%22%7B%7D%22%2C%20a)%3B%0A%7D%0A
- title: 從檔案來的字串常量
  content_markdown: >
    如果你有一些非常長的文字，可以考慮使用巨集 (marco) `include_str!` 將字串從本地檔案讀到你的程式裡：


    ```rust

    let hello_html = include_str!("hello.html");

    ```
- title: 字串切片 (string slice)
  content_markdown: >
    一個字串切片是一個指到記憶體裡一連串位元組的參考，而且必定是合法的 utf-8。


    一個 `str` 切片的字串切片 (一個子切片)，必定也是合法的 utf-8。


    常見的 `&str` 方法：

    * `len` 取得該字串的位元組長度 (不是字元數量)。

    *  `starts_with`/`ends_with` 為基本測試。

    * `is_empty` 回傳 true 如果長度是 0。

    * `find` 回傳第一個位置的 `Option<usize>`。
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=fn%20main()%20%7B%0A%20%20%20%20let%20a%20%3D%20%22hi%20%F0%9F%A6%80%22%3B%0A%20%20%20%20println!(%22%7B%7D%22%2C%20a.len())%3B%0A%20%20%20%20let%20first_word%20%3D%20%26a%5B0..2%5D%3B%0A%20%20%20%20let%20second_word%20%3D%20%26a%5B3..7%5D%3B%0A%20%20%20%20%2F%2F%20let%20half_crab%20%3D%20%26a%5B3..5%5D%3B%20FAILS%0A%20%20%20%20%2F%2F%20Rust%20does%20not%20accept%20slices%20of%20invalid%20unicode%20characters%0A%20%20%20%20println!(%22%7B%7D%20%7B%7D%22%2C%20first_word%2C%20second_word)%3B%0A%7D%0A
- title: 字元 (chars)
  content_markdown: >
    與萬國碼一起工作有許多困難的地方，Rust 提供了一個方法可以取得一個 utf-8 位元組的字元向量，它的型別是 `char`。


    一個 `char` 的大小永遠是 4 個位元組 (為了有效率地查找各別的字元)。
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=fn%20main()%20%7B%0A%20%20%20%20%2F%2F%20collect%20the%20characters%20as%20a%20vector%20of%20char%0A%20%20%20%20let%20chars%20%3D%20%22hi%20%F0%9F%A6%80%22.chars().collect%3A%3A%3CVec%3Cchar%3E%3E()%3B%0A%20%20%20%20println!(%22%7B%7D%22%2C%20chars.len())%3B%20%2F%2F%20should%20be%204%0A%20%20%20%20%2F%2F%20since%20chars%20are%204%20bytes%20we%20can%20convert%20to%20u32%0A%20%20%20%20println!(%22%7B%7D%22%2C%20chars%5B3%5D%20as%20u32)%3B%0A%7D%0A
- title: 字串 (string)
  content_markdown: >
    一個**字串** 是一個結構，它在堆記憶體 (heap memory) 裡擁有一連串的 utf-8 位元組。


    因為它的記憶體在堆 (heap) 上，所以它可以被延長、修改…等，而字串常量 (string literals) 不能。


    常見的方法：


    * `push_str` 在一個字串的尾巴加入更多 utf-8 位元組。

    * `replace` 取代一連串的 utf-8 位元組。

    * `to_lowercase`/`to_uppercase` 切換大小寫。

    * `trim` 切除空白


    當一個字串被徹下時，它的堆記憶體也同時被徹下。


    `String` 有 `+` 運算子可以與一個 `&str` 延長字串，而且他會回傳自己，但它可能不如你想像中的好用。
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=fn%20main()%20%7B%0A%20%20%20%20let%20mut%20helloworld%20%3D%20String%3A%3Afrom(%22hello%22)%3B%0A%20%20%20%20helloworld.push_str(%22%20world%22)%3B%0A%20%20%20%20helloworld%20%3D%20helloworld%20%2B%20%22!%22%3B%0A%20%20%20%20println!(%22%7B%7D%22%2C%20helloworld)%3B%0A%7D%0A
- title: 將文字當作函式參數
  content_markdown: >
    字串常量及字串都以字串切片的方式傳給函式。這給了大部份場景許多彈性，當你並不是真的想要傳遞擁有權的時候。
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=fn%20say_it_loud(msg%3A%26str)%7B%0A%20%20%20%20println!(%22%7B%7D!!!%22%2Cmsg.to_string().to_uppercase())%3B%0A%7D%0A%0Afn%20main()%20%7B%0A%20%20%20%20%2F%2F%20say_it_loud%20can%20borrow%20%26%27static%20str%20as%20a%20%26str%0A%20%20%20%20say_it_loud(%22hello%22)%3B%0A%20%20%20%20%2F%2F%20say_it_loud%20can%20also%20borrow%20String%20as%20a%20%26str%0A%20%20%20%20say_it_loud(%26String%3A%3Afrom(%22goodbye%22))%3B%0A%7D%0A
- title: 建立字串
  content_markdown: |
    `concat` 及 `join` 是兩個簡單但強大的建位字串的方法。
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=fn%20main()%20%7B%0A%20%20%20%20let%20helloworld%20%3D%20%5B%22hello%22%2C%20%22%20%22%2C%20%22world%22%2C%20%22!%22%5D.concat()%3B%0A%20%20%20%20let%20abc%20%3D%20%5B%22a%22%2C%20%22b%22%2C%20%22c%22%5D.join(%22%2C%22)%3B%0A%20%20%20%20println!(%22%7B%7D%22%2C%20helloworld)%3B%0A%20%20%20%20println!(%22%7B%7D%22%2Cabc)%3B%0A%7D%0A
- title: 字串格式化
  content_markdown: >
    巨集 `format!` 允許我們產生一個定義好在哪、該怎麼表示的占位符 (placeholders) 的字串 (例如：`{}`)。


    `format!` 使用與 `println!` 相同的參數字串


    這個函式的使用方法實在太多了，已經超出 *Tour of Rust* 的範圍了，可以查看[這裡](https://doc.rust-lang.org/std/fmt/)的文件。
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=fn%20main()%20%7B%0A%20%20%20%20let%20a%20%3D%2042%3B%0A%20%20%20%20let%20f%20%3D%20format!(%22secret%20to%20life%3A%20%7B%7D%22%2Ca)%3B%0A%20%20%20%20println!(%22%7B%7D%22%2Cf)%3B%0A%7D%0A
- title: 字串轉換
  content_markdown: |
    許多型別都能用 `to_string` 轉換成字串。

    `parse` 可以被用來轉換字串或字串常量為一個型別的值。這個函式回傳一個 `Result` 因為它可能會失敗。
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=fn%20main()%20-%3E%20Result%3C()%2C%20std%3A%3Anum%3A%3AParseIntError%3E%20%7B%0A%20%20%20%20let%20a%20%3D%2042%3B%0A%20%20%20%20let%20a_string%20%3D%20a.to_string()%3B%0A%20%20%20%20let%20b%20%3D%20a_string.parse%3A%3A%3Ci32%3E()%3F%3B%0A%20%20%20%20println!(%22%7B%7D%20%7B%7D%22%2C%20a%2C%20b)%3B%0A%20%20%20%20Ok(())%0A%7D%0A
- title: 第六章 - 總結
  content_markdown: >
    現在你知道文字的基本了！如同你所看到的，萬國碼使得文字處理有一點難處理，但標準函式庫 (standard library) 有很多函式讓它容易被管理。


    截至目前為止，我們大部份都以程序化程式設計 (procedural paradigm) 的角度來看待 Rust (即，單單只有函式跟資料)，
    但現在是時候讓我們討論特徵 (traits) 及 Rust 物件導向程式設計 (object oriented paradigm) 的能力了。
