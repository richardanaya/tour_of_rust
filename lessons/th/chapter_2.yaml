- title: บทที่ 2 - Basic Control Flow
  content_markdown: >
    ในบทนี้เราจะมาพูดถึงเรื่องการควบคุม flow ขั้นพื้นฐานใน Rust

    ถ้าหากว่าคุณคุ้นเคยกับภาษา C คุณจะรู้สึกว่าเหมือนอยู่บ้านและอาจจะมีอย่างน้อยหนึ่งหรือสองเรื่องให้คุณประหลาดใจเล่น
- title: if/else if/else
  content_markdown: >
    การสร้างทางเลือกในโค้ดของ Rust ไม่มีอะไรให้ประหลาดใจ แฮร่!


    ในเงื่อนไขไม่ต้องมีวงเล็บ! ถามจริง เราเคยต้องการมันด้วยเหรอ? ตอนนี้ตรรกะของเราช่างดูงดงามแถมยังสะอาดสะอ้านเสียจริง


    และพวก operation ที่เราคุ้นเคยก็ยังมีให้ใช้เหมือนเดิม: `==`, `!=`, `<`,
    `>`, `<=`, `>=`, `!`, `||`, `&&`.
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=fn%20main()%20%7B%0A%20%20%20%20let%20x%20%3D%2042%3B%0A%20%20%20%20if%20x%20%3C%2042%20%7B%0A%20%20%20%20%20%20%20%20println!(%22less%20than%2042%22)%3B%0A%20%20%20%20%7D%20else%20if%20x%20%3D%3D%2042%20%7B%0A%20%20%20%20%20%20%20%20println!(%22is%2042%22)%3B%0A%20%20%20%20%7D%20else%20%7B%0A%20%20%20%20%20%20%20%20println!(%22greater%20than%2042%22)%3B%0A%20%20%20%20%7D%0A%7D
- title: loop
  content_markdown: |
    อยากได้ลูปแบบไม่มีจุดจบเหรอ?

    Rust จัดให้

    `break` จะพาคุณหนีออกจากลูปเมื่อคุณต้องการ

    `loop` คำนี้มีความลับที่เดี๋ยวเราจะบอก
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=fn%20main()%20%7B%0A%20%20%20%20let%20mut%20x%20%3D%200%3B%0A%20%20%20%20loop%20%7B%0A%20%20%20%20%20%20%20%20x%20%2B%3D%201%3B%0A%20%20%20%20%20%20%20%20if%20x%20%3D%3D%2042%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20break%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%20%20%20%20println!(%22%7B%7D%22%2C%20x)%3B%0A%7D%0A
- title: while
  content_markdown: |
    `while` ให้คุณใส่เงื่อนไขลงไปในลูปได้อย่างง่ายดาย

    ถ้าเงื่อนไขถูกประเมินว่าเป็น `false` มันจะออกจากลูป
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=fn%20main()%20%7B%0A%20%20%20%20let%20mut%20x%20%3D%200%3B%0A%20%20%20%20while%20x%20!%3D%2042%20%7B%0A%20%20%20%20%20%20%20%20x%20%2B%3D%201%3B%0A%20%20%20%20%7D%0A%7D%0A
- title: for
  content_markdown: >
    `for` ของ Rust พัฒนาไปอีกขั้นด้วยการที่ มันสามารถ วนลูปซ้ำๆให้กับนิพจน์ใดก็ตามที่ถูกประเมินว่าเป็น iterator

    แล้ว iterator คืออะไรน่ะเหรอ? เจ้า iterator มันก็คือ ออปเจ็ค ที่คุณสามารถถามมันว่า "คุณมีของอะไรอีกบ้าง?" ไปจนกว่ามันจะไม่มีอะไรให้คุณอีก


    เราค่อยมาสำรวจเรื่องนี้กันต่อภายหลัง ตอนนี้รู้ไว้เพียงแค่ Rust สร้าง iterator จากลำดับของตัวเลขได้ง่ายมากๆ


    operator `..` สร้าง iterator จากตัวเลขเริ่มต้นทางซ้ายไปเรื่อยๆจนถึง แต่ไม่รวมค่าทางด้านขวา


    operator `..=` สร้าง iterator จากตัวเลขเริ่มต้นทางซ้ายไปเรื่อยๆจนถึง และรวมค่าทางด้านขวา
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=fn%20main()%20%7B%0A%20%20%20%20for%20x%20in%200..5%20%7B%0A%20%20%20%20%20%20%20%20println!(%22%7B%7D%22%2C%20x)%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20for%20x%20in%200..%3D5%20%7B%0A%20%20%20%20%20%20%20%20println!(%22%7B%7D%22%2C%20x)%3B%0A%20%20%20%20%7D%0A%7D%0A
- title: match
  content_markdown: >
    คิดถึง switch statement ของคุณไหมล่ะ? Rust มีคีย์เวิร์ดที่มีประโยชน์อย่างเหลือเชื่อ

    สำหรับจับคู่เงื่อนไขที่เป็นไปได้ทั้งหมดของค่านั้น และ เรียกใช้โค้ดตามเส้นทางที่จับคู่ได้ว่าเป็นจริง

    ลองดูจากวิธีที่มันทำงานกับตัวเลขนี้ดูก่อน แล้วเราค่อยมาคุยให้ละเอียดกว่านี้ในบทต่อๆไปภายหลัง

    ในเรื่องการจับคู่รูปแบบที่ซับซ้อนกว่านี้ ฉันสัญญาว่าคุ้มค่ากับการรอคอยแน่ๆ


    `match` จะตรวจสอบละเอียดมาก ดังนั้นจึงควรจัดการให้ครอบคลุมทุกกรณี


    match มักจะใช้คู่กับการแยกโครงสร้าง ซึ่งเป็นรูปแบบที่จะพบได้บ่อยๆใน Rust
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=fn%20main()%20%7B%0A%20%20%20%20let%20x%20%3D%2042%3B%0A%0A%20%20%20%20match%20x%20%7B%0A%20%20%20%20%20%20%20%200%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20println!(%22found%20zero%22)%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%2F%2F%20we%20can%20match%20against%20multiple%20values%0A%20%20%20%20%20%20%20%201%20%7C%202%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20println!(%22found%201%20or%202!%22)%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%2F%2F%20we%20can%20match%20against%20ranges%0A%20%20%20%20%20%20%20%203..%3D9%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20println!(%22found%20a%20number%203%20to%209%20inclusively%22)%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%2F%2F%20we%20can%20bind%20the%20matched%20number%20to%20a%20variable%0A%20%20%20%20%20%20%20%20matched_num%20%40%2010..%3D100%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20println!(%22found%20%7B%7D%20number%20between%2010%20to%20100!%22%2C%20matched_num)%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%2F%2F%20this%20is%20the%20default%20match%20that%20must%20exist%20if%20not%20all%20cases%20are%20handled%0A%20%20%20%20%20%20%20%20_%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20println!(%22found%20something%20else!%22)%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%7D%0A
- title: Returning Values From loop
  content_markdown: |
    `loop` สามารถใช้ break เพื่อคืนค่าได้ด้วย
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=fn%20main()%20%7B%0A%20%20%20%20let%20mut%20x%20%3D%200%3B%0A%20%20%20%20let%20v%20%3D%20loop%20%7B%0A%20%20%20%20%20%20%20%20x%20%2B%3D%201%3B%0A%20%20%20%20%20%20%20%20if%20x%20%3D%3D%2013%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20break%20%22found%20the%2013%22%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%3B%0A%20%20%20%20println!(%22from%20loop%3A%20%7B%7D%22%2C%20v)%3B%0A%7D%0A
- title: การคืนค่าจาก Block Expressions
  content_markdown: >
    `if`, `match`, ฟังก์ชัน, และ กลุ่มคำสั่งในบล็อก ใน Rust ล้วนมีวิธีการคืนค่าที่ดูน่าสนใจ


    หากว่าในคำสั่งสุดท้ายที่อยู่ในบล็อกของ `if`, `match`, ฟังก์ชัน หรือ กลุ่มคำสั่งในบล็อก เป็นคำสั่งที่ไม่มี `;`

    Rust จะส่งค่าในบรรทัดนั้นกลับไปเข้าตัวแปรได้เลย ซึ่งนี่มันทำให้ตรรกะที่เขียนดูกระชับและงดงามมาก


    สังเกตดูจะพบว่า มันยอมให้ `if` เขียนอยู่ในรูปแบบ ternary expression ในบรรทัดเดียวได้ด้วย
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=fn%20example()%20-%3E%20i32%20%7B%0A%20%20%20%20let%20x%20%3D%2042%3B%0A%20%20%20%20%2F%2F%20Rust's%20ternary%20expression%0A%20%20%20%20let%20v%20%3D%20if%20x%20%3C%2042%20%7B%20-1%20%7D%20else%20%7B%201%20%7D%3B%0A%20%20%20%20println!(%22from%20if%3A%20%7B%7D%22%2C%20v)%3B%0A%0A%20%20%20%20let%20food%20%3D%20%22hamburger%22%3B%0A%20%20%20%20let%20result%20%3D%20match%20food%20%7B%0A%20%20%20%20%20%20%20%20%22hotdog%22%20%3D%3E%20%22is%20hotdog%22%2C%0A%20%20%20%20%20%20%20%20%2F%2F%20notice%20the%20braces%20are%20optional%20when%20its%20just%20a%20single%20return%20expression%0A%20%20%20%20%20%20%20%20_%20%3D%3E%20%22is%20not%20hotdog%22%2C%0A%20%20%20%20%7D%3B%0A%20%20%20%20println!(%22identifying%20food%3A%20%7B%7D%22%2C%20result)%3B%0A%0A%20%20%20%20let%20v%20%3D%20%7B%0A%20%20%20%20%20%20%20%20%2F%2F%20This%20scope%20block%20lets%20us%20get%20a%20result%20without%20polluting%20function%20scope%0A%20%20%20%20%20%20%20%20let%20a%20%3D%201%3B%0A%20%20%20%20%20%20%20%20let%20b%20%3D%202%3B%0A%20%20%20%20%20%20%20%20a%20%2B%20b%0A%20%20%20%20%7D%3B%0A%20%20%20%20println!(%22from%20block%3A%20%7B%7D%22%2C%20v)%3B%0A%0A%20%20%20%20%2F%2F%20The%20idiomatic%20way%20to%20return%20a%20value%20in%20rust%20from%20a%20function%20at%20the%20end%0A%20%20%20%20v%20%2B%204%0A%7D%0A%0Afn%20main()%20%7B%0A%20%20%20%20println!(%22from%20function%3A%20%7B%7D%22%2C%20example())%3B%0A%7D%0A
- title: บทที่ 2 - สรุป
  content_markdown: >
    หวังว่าฉันจะทำให้เห็นถึงความสามารถของ Rust ได้บ้าง แม้ว่าจะเป็นเพียงแค่เรื่องพื้นฐานที่สุด

    และเราจะมาคุยเรื่อง `for` และ `match` กันให้ลึกกว่านี้ เมื่อเรามีความรู้มากพอที่จะ

    ใช้มันได้เต็มความสามารถของมัน

    ในตอนหน้า เราจะไปเรียนรู้ต่อในเรื่อง โครงสร้างข้อมูลพื้นฐานของ Rust กัน
