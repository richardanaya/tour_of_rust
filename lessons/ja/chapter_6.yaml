- title: 第 6 章 - テキスト
  content_markdown: >
    さて、Rustにおけるメモリの考え方について少し理解できたので、テキストについて深堀りするための準備が整いました。

    Rustでは、他の言語ではあまり馴染みのない国際的なテキストやバイトレベルの問題が考慮されています。

    それでも、Rustにはこれらの問題を管理するための優れたツールが多くあります。
- title: 文字列リテラル
  content_markdown: >
    文字列リテラルは常にUnicodeです。

    文字列リテラルの型は`&'static str`です。:

    * `&` はメモリ中の場所を参照していることを意味しており、 `&mut` を欠いているのは、
    コンパイラがそれを修正することを認めていないということです。

    * `'static` は文字列データがプログラムの終了まで有効であるということを意味しています。（文字列データは決して消えません。）

    * `str` は常に有効な**utf-8**であるバイト列を指していることを意味しています。


    メモリに関する詳細：

    * Rustのコンパイラは文字列をプログラムメモリのデータセグメントに入れるでしょう。
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=fn%20main()%20%7B%0A%20%20%20%20let%20a%3A%20%26'static%20str%20%3D%20%22%E3%81%93%E3%82%93%E3%81%AB%E3%81%A1%E3%81%AF%20%F0%9F%A6%80%22%3B%0A%20%20%20%20println!(%22%7B%7D%20%7B%7D%22%2C%20a%2C%20a.len())%3B%0A%7D%0A
- title: utf-8とは
  content_markdown: "様々な言語がコンピュター上で使われるようになるに連れて, ASCIIで許可されている以上のテキスト文字を表現する必要が出てきました。（ASCIIで許可されているのは1バイト、つまり256文字です）\n\n**utf-8** は1～4バイトの可変バイト長で導入され、それによって表現可能な文字の範囲が大幅に広がりました。\n\n可変サイズ文字の利点として挙げられるのは、一般的なASCIIで使われる文字について余計なバイトを必要としなかったことです。（一般的なASCIIで使われる文字について**utf-8** で必要とするのはASCIIと変わらずたった1バイトです）\n\n可変サイズの文字の欠点として挙げられるのは、簡単なインデキシング（例：4番目の文字を取得するために `my_text[3]` を使用すること）における文字の検索が（**O(1)** 定数時間で）素早くできなくなることです。すぐ前にある文字が可変幅を持つことで、4番目の文字がバイト列のどこから実際に始まるのかが変わってしまう可能性があります。\n\nその代わり、Unicode文字が実際にどこから始まるのかを知るために **utf-8** バイトのシーケンスを繰り返さなければなりません。（計算量は線形時間 **O(n)**）\n\nFerris「水中にいるお友達の絵文字を表現するのに **utf-8** があると嬉しいね！」\n\n<span class=\"emoji\">\U0001F420\U0001F419\U0001F41F\U0001F42C\U0001F40B</span>\n"
- title: エスケープ文字
  content_markdown: >
    特定の文字を視覚的に表現するのは難しいので、**エスケープ
    コード** を使用することでその場所に記号を挿入することができます。


    RustではC言語の共通エスケープコードがサポートされています。:

    * `\n` - 改行

    * `\r` - キャリッジ・リターン

    * `\t` - タブ

    * `\\` - バックスラッシュ

    * `\0` - null

    * `\'` - シングルクォート


    エスケープ文字の一覧は[ここ](https://doc.rust-lang.org/reference/tokens.html)にあります。
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=fn%20main()%20%7B%0A%20%20%20%20let%20a%3A%20%26'static%20str%20%3D%20%22Ferris%E3%81%AF%E8%A8%80%E3%81%86%3A%5Ct%5C%22%E3%81%93%E3%82%93%E3%81%AB%E3%81%A1%E3%81%AF%5C%22%22%3B%0A%20%20%20%20println!(%22%7B%7D%22%2Ca)%3B%0A%7D%0A
- title: 複数行の文字列リテラル
  content_markdown: |
    Rustにおける文字列はデフォルトで複数行に対応しています。

    改行したくない場合は、行の最後に `\` を挿入しましょう。
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=fn%20main()%20%7B%0A%20%20%20%20let%20haiku%3A%20%26'static%20str%20%3D%20%22%0A%20%20%20%20%20%20%20%20%E6%9B%B8%E3%81%84%E3%81%A6%E3%81%BF%E3%81%9F%E3%82%8A%0A%20%20%20%20%20%20%20%20%E3%81%91%E3%81%97%E3%81%9F%E3%82%8A%E6%9E%9C%E3%81%A6%E3%81%AF%0A%20%20%20%20%20%20%20%20%E3%81%91%E3%81%97%E3%81%AE%E8%8A%B1%0A%20%20%20%20%20%20%20%20-%20%E7%AB%8B%E8%8A%B1%E5%8C%97%E6%9E%9D%22%3B%0A%20%20%20%20println!(%22%7B%7D%22%2C%20haiku)%3B%0A%20%20%20%20%0A%20%20%20%20%0A%20%20%20%20println!(%22%E3%81%93%E3%82%93%E3%81%AB%E3%81%A1%E3%81%AF%20%5C%0A%20%20%20%20%E4%B8%96%E7%95%8C%22)%20%2F%2F%20%E4%B8%96%E7%95%8C%E3%81%AE%E5%89%8D%E3%81%AB%E3%81%82%E3%82%8B%E9%96%93%E9%9A%94%E3%81%AF%E7%84%A1%E8%A6%96%E3%81%95%E3%82%8C%E3%81%BE%E3%81%99%0A%7D%0A
- title: 生文字列リテラル
  content_markdown: >
    生文字列では、`r#"`で始まり`"#`で終わる文字列を逐語的に書くことができます。

    これによって、通常の文字列との区別がつかない可能性のある文字をリテラルとして挿入することができます。(二重引用符やバックスラッシュなど)
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=fn%20main()%20%7B%0A%20%20%20%20let%20a%3A%20%26'static%20str%20%3D%20r%23%22%0A%20%20%20%20%20%20%20%20%3Cdiv%20class%3D%22advice%22%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%E7%94%9F%E6%96%87%E5%AD%97%E5%88%97%E3%81%AF%E6%A7%98%E3%80%85%E3%81%AA%E5%A0%B4%E9%9D%A2%E3%81%A7%E5%BD%B9%E3%81%AB%E7%AB%8B%E3%81%A1%E3%81%BE%E3%81%99%E3%80%82%0A%20%20%20%20%20%20%20%20%3C%2Fdiv%3E%0A%20%20%20%20%20%20%20%20%22%23%3B%0A%20%20%20%20println!(%22%7B%7D%22%2C%20a)%3B%0A%7D%0A
- title: ファイルから文字列リテラルを読み込む
  content_markdown: >
    非常に大きなテキストがある場合は, `include_str!` というマクロを使って
    ローカルファイルのテキストをプログラムの中でインクルードしてみてください。：


    ```rust

    let hello_html = include_str!("hello.html");

    ```
- title: 文字列スライス
  content_markdown: >
    文字列スライスは、常に有効な utf-8 でなければならないメモリ内のバイト列への参照です。


    文字列のスライス(サブスライス)である `str` のスライスも有効な utf-8 でなければなりません。


    `&str` の一般的なメソッド：

    * `len` は文字列リテラルの長さをバイト単位で取得します。（文字数ではない）

    * 基本的なテストのための `starts_with`/`ends_with`

    * `is_empty` は長さがゼロの時にtrueを返します。

    * `find` はテキストの最初の位置の `Option<usize>` を返します。
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=fn%20main()%20%7B%0A%20%20%20%20let%20a%20%3D%20%22hi%20%F0%9F%A6%80%22%3B%0A%20%20%20%20println!(%22%7B%7D%22%2C%20a.len())%3B%0A%20%20%20%20let%20first_word%20%3D%20%26a%5B0..2%5D%3B%0A%20%20%20%20let%20second_word%20%3D%20%26a%5B3..7%5D%3B%0A%20%20%20%20%2F%2F%20let%20half_crab%20%3D%20%26a%5B3..5%5D%3B%20%E3%81%AF%E5%A4%B1%E6%95%97%E3%81%97%E3%81%BE%E3%81%99%E3%80%82%0A%20%20%20%20%2F%2F%20Rust%20%E3%81%AF%E7%84%A1%E5%8A%B9%E3%81%AA%20unicode%20%E6%96%87%E5%AD%97%E3%81%AE%E3%82%B9%E3%83%A9%E3%82%A4%E3%82%B9%E3%82%92%E5%8F%97%E3%81%91%E4%BB%98%E3%81%91%E3%81%BE%E3%81%9B%E3%82%93%E3%80%82%0A%20%20%20%20println!(%22%7B%7D%20%7B%7D%22%2C%20first_word%2C%20second_word)%3B%0A%7D%0A
- title: Chars
  content_markdown: >
    Unicodeでの作業が非常に困難なため、Rustではutf-8バイトのシーケンスを `char` 型の文字のベクトルとして取得する方法が提供されています。


    char` は常に 4 バイトの長さです。(これによって個々の文字を効率的に検索できるようになっています)
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=fn%20main()%20%7B%0A%20%20%20%20%2F%2F%20%E6%96%87%E5%AD%97%E3%82%92char%E3%81%AE%E3%83%99%E3%82%AF%E3%83%88%E3%83%AB%E3%81%A8%E3%81%97%E3%81%A6%E9%9B%86%E3%82%81%E3%82%8B%0A%20%20%20%20let%20chars%20%3D%20%22hi%20%F0%9F%A6%80%22.chars().collect%3A%3A%3CVec%3Cchar%3E%3E()%3B%0A%20%20%20%20println!(%22%7B%7D%22%2C%20chars.len())%3B%20%2F%2F%20should%20be%204%0A%20%20%20%20%2F%2F%20chars%20%E3%81%AF%204%20%E3%83%90%E3%82%A4%E3%83%88%E3%81%AA%E3%81%AE%E3%81%A7%E3%80%81u32%20%E3%81%AB%E5%A4%89%E6%8F%9B%E3%81%99%E3%82%8B%E3%81%93%E3%81%A8%E3%81%8C%E3%81%A7%E3%81%8D%E3%82%8B%0A%20%20%20%20println!(%22%7B%7D%22%2C%20chars%5B3%5D%20as%20u32)%3B%0A%7D%0A
- title: String
  content_markdown: >
    **String** はヒープにutf-8バイト列をもつ構造体です。


    そのメモリはヒープ上にあるため、文字列リテラルでは出来ないような、拡張や修正などが可能です。


    共通のメソッド:


    * `push_str` 文字列の最後にutf-8バイトを追加します。

    * `replace` utf-8バイト列を他のutf-8バイト列で置換します。

    * `to_lowercase`/`to_uppercase` 大文字や小文字に変えます。

    * `trim` 空白を切り取ります。


    Stringがドロップされると、そのヒープ内のメモリもドロップされます。


    `String` には `&str`で文字列を拡張し、自分自身を返す `+` 演算子がありますが、
    期待しているほど使い勝手は良くないかもしれません。
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=fn%20main()%20%7B%0A%20%20%20%20let%20mut%20helloworld%20%3D%20String%3A%3Afrom(%22hello%22)%3B%0A%20%20%20%20helloworld.push_str(%22%20world%22)%3B%0A%20%20%20%20helloworld%20%3D%20helloworld%20%2B%20%22!%22%3B%0A%20%20%20%20println!(%22%7B%7D%22%2C%20helloworld)%3B%0A%7D%0A
- title: 関数パラメータとしてのテキスト
  content_markdown: >
    文字列リテラルや文字列は、一般的に文字列スライスとして関数に渡されます。
    これによって、実際には所有権を渡す必要がないほとんど場合において柔軟性が増します。
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=fn%20say_it_loud(msg%3A%26str)%7B%0A%20%20%20%20println!(%22%7B%7D!!!%22%2Cmsg.to_string().to_uppercase())%3B%0A%7D%0A%0Afn%20main()%20%7B%0A%20%20%20%20%2F%2F%20say_it_loud%E3%81%AF%26'static%20str%E3%82%92%26str%E3%81%A8%E3%81%97%E3%81%A6%E5%80%9F%E7%94%A8%E3%81%99%E3%82%8B%E3%81%93%E3%81%A8%E3%81%8C%E3%81%A7%E3%81%8D%E3%81%BE%E3%81%99%0A%20%20%20%20say_it_loud(%22hello%22)%3B%0A%20%20%20%20%2F%2F%20say_it_loud%E3%81%AFString%E3%82%92%26str%E3%81%A8%E3%81%97%E3%81%A6%E5%80%9F%E7%94%A8%E3%81%99%E3%82%8B%E3%81%93%E3%81%A8%E3%82%82%E3%81%A7%E3%81%8D%E3%81%BE%E3%81%99%0A%20%20%20%20say_it_loud(%26String%3A%3Afrom(%22goodbye%22))%3B%0A%7D%0A
- title: 文字列の構築
  content_markdown: |
    `concat` と `join` は、文字列を構築するためのシンプルだが強力な方法です。
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=fn%20main()%20%7B%0A%20%20%20%20let%20helloworld%20%3D%20%5B%22hello%22%2C%20%22%20%22%2C%20%22world%22%2C%20%22!%22%5D.concat()%3B%0A%20%20%20%20let%20abc%20%3D%20%5B%22a%22%2C%20%22b%22%2C%20%22c%22%5D.join(%22%2C%22)%3B%0A%20%20%20%20println!(%22%7B%7D%22%2C%20helloworld)%3B%0A%20%20%20%20println!(%22%7B%7D%22%2Cabc)%3B%0A%7D%0A
- title: 文字列のフォーマット
  content_markdown: >
    `format!`マクロを使うと、パラメータ化された文字列を定義して文字列を作成することができ、
    値をどこにどのように配置すべきかはプレースホルダ（例：`{}`）で指定します。


    `format!` は `println!` と同じパラメータ付きの文字列を使用します。


    この関数の機能は、*Tour of Rust* では説明しきれません。
    [ドキュメント](https://doc.rust-lang.org/std/fmt/) をチェックしてください。
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=fn%20main()%20%7B%0A%20%20%20%20let%20a%20%3D%2042%3B%0A%20%20%20%20let%20f%20%3D%20format!(%22secret%20to%20life%3A%20%7B%7D%22%2Ca)%3B%0A%20%20%20%20println!(%22%7B%7D%22%2Cf)%3B%0A%7D%0A
- title: 文字列変換
  content_markdown: |
    多くの型は `to_string` を用いて文字列に変換することができます。

    ジェネリック関数 `parse` を用いることで文字列や文字列リテラルを型付きの値に変換できます。この関数は失敗する可能性があるので、`Result`を返します。
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=fn%20main()%20-%3E%20Result%3C()%2C%20std%3A%3Anum%3A%3AParseIntError%3E%20%7B%0A%20%20%20%20let%20a%20%3D%2042%3B%0A%20%20%20%20let%20a_string%20%3D%20a.to_string()%3B%0A%20%20%20%20let%20b%20%3D%20a_string.parse%3A%3A%3Ci32%3E()%3F%3B%0A%20%20%20%20println!(%22%7B%7D%20%7B%7D%22%2C%20a%2C%20b)%3B%0A%20%20%20%20Ok(())%0A%7D%0A
- title: 第 6 章 - まとめ
  content_markdown: >
    これで、テキストの基本が分かりましたね！これまで見てきたようにUnicodeによってテキストの操作は少し厄介になりますが、標準ライブラリにはその管理を簡単にするための多くの機能があります。 


    これまでほとんどの場合、手続き的なパラダイム（つまり、関数とデータだけ）からRustを見てきましたが、今回はRustのオブジェクト指向パラダイムによって開放されるtraitsと能力について話します。
