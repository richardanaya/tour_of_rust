- title: 第 7 章 - オブジェクト指向プログラミング
  content_markdown: >
    関数でアイデアを表現することは、動作やデータを表現する方法として実績があります（C言語では何十年もそうしてきました！）。
    歴史的に見ると、コンピュータサイエンスは他にも有用なデータの表現方法と抽象化を発見してきました。
    オブジェクト指向プログラミング(OOP)は、そのような方法の1つとしてお馴染みかもしれません。
    この章では、ただの関数だけではないRustプログラミング言語を探求していきます。
- title: オブジェクト指向プログラミングとは？
  content_markdown: >
    オブジェクト指向プログラミングとは、大まかに以下のようないくつかの象徴的な特徴を持つプログラミング言語のことです。

    * カプセル化 - データと関数を *オブジェクト* という一つの型の概念的な単位で関連付けること。

    * 抽象化 - データや関数のメンバを隠して、オブジェクトの実装の詳細を難読化すること。

    * ポリモーフィズム - 1つのインターフェースを通して、異なるタイプのオブジェクトと相互作用する能力のこと。

    * 継承 - 他のオブジェクトからデータや振る舞いを引き継ぐこと。
- title: Rustはオブジェクト指向プログラミング言語ではない
  content_markdown: >
    Rustは、データと動作の継承機能を意図的に持っていません。


    * 構造体は親構造体からフィールドを継承することはできない。

    * 構造体は親構造体から関数を継承することができない。


    しかし、Rustは多くのプログラミング言語機能を実装しているので、この不足は気にならないかもしれません。
- title: メソッドによるカプセル化
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=struct%20SeaCreature%20%7B%0A%20%20%20%20noise%3A%20String%2C%0A%7D%0A%0Aimpl%20SeaCreature%20%7B%0A%20%20%20%20fn%20get_sound(%26self)%20-%3E%20%26str%20%7B%0A%20%20%20%20%20%20%20%20%26self.noise%0A%20%20%20%20%7D%0A%7D%0A%0Afn%20main()%20%7B%0A%20%20%20%20let%20creature%20%3D%20SeaCreature%20%7B%0A%20%20%20%20%20%20%20%20noise%3A%20String%3A%3Afrom(%22blub%22)%2C%0A%20%20%20%20%7D%3B%0A%20%20%20%20println!(%22%7B%7D%22%2C%20creature.get_sound())%3B%0A%7D%0A
  content_markdown: >
    Rustは、いくつかの関数（*メソッド* とも呼ばれる）に関連付けられた構造体である *オブジェクト* の概念をサポートしています。


    どのメソッドの最初のパラメータも、メソッド呼び出しに関連付けられたインスタンスへの参照でなければなりません（例： `instanceOfObj.foo()`)。Rustが使うのは下記の通り：

    * `&self` - インスタンスへの不変の参照。

    * `&mut self` - インスタンスへの可変の参照。


    メソッドは、キーワード `impl`` を持つ実装ブロックの中で定義されます。

    ```rust

    impl MyStruct { 
        ...
        fn foo(&self) {
            ...
        }
    }

    ```
- title: 選択的な公開による抽象化
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=struct%20SeaCreature%20%7B%0A%20%20%20%20pub%20name%3A%20String%2C%0A%20%20%20%20noise%3A%20String%2C%0A%7D%0A%0Aimpl%20SeaCreature%20%7B%0A%20%20%20%20pub%20fn%20get_sound(%26self)%20-%3E%20%26str%20%7B%0A%20%20%20%20%20%20%20%20%26self.noise%0A%20%20%20%20%7D%0A%7D%0A%0Afn%20main()%20%7B%0A%20%20%20%20let%20creature%20%3D%20SeaCreature%20%7B%0A%20%20%20%20%20%20%20%20name%3A%20String%3A%3Afrom(%22Ferris%22)%2C%0A%20%20%20%20%20%20%20%20noise%3A%20String%3A%3Afrom(%22blub%22)%2C%0A%20%20%20%20%7D%3B%0A%20%20%20%20println!(%22%7B%7D%22%2C%20creature.get_sound())%3B%0A%7D%0A
  content_markdown: >
    Rustは物体の内部構造を隠すことができます。


    デフォルトでは、フィールドとメソッドは、それらが属しているモジュールにのみアクセス可能です。


    `pub` キーワードは、構造体のフィールドとメソッドをモジュールの外部に公開します。
- title: トレイトを用いたポリモーフィズム
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=struct%20SeaCreature%20%7B%0A%20%20%20%20pub%20name%3A%20String%2C%0A%20%20%20%20noise%3A%20String%2C%0A%7D%0A%0Aimpl%20SeaCreature%20%7B%0A%20%20%20%20pub%20fn%20get_sound(%26self)%20-%3E%20%26str%20%7B%0A%20%20%20%20%20%20%20%20%26self.noise%0A%20%20%20%20%7D%0A%7D%0A%0Atrait%20NoiseMaker%20%7B%0A%20%20%20%20fn%20make_noise(%26self)%3B%0A%7D%0A%0Aimpl%20NoiseMaker%20for%20SeaCreature%20%7B%0A%20%20%20%20fn%20make_noise(%26self)%20%7B%0A%20%20%20%20%20%20%20%20println!(%22%7B%7D%22%2C%20%26self.get_sound())%3B%0A%20%20%20%20%7D%0A%7D%0A%0Afn%20main()%20%7B%0A%20%20%20%20let%20creature%20%3D%20SeaCreature%20%7B%0A%20%20%20%20%20%20%20%20name%3A%20String%3A%3Afrom(%22Ferris%22)%2C%0A%20%20%20%20%20%20%20%20noise%3A%20String%3A%3Afrom(%22blub%22)%2C%0A%20%20%20%20%7D%3B%0A%20%20%20%20creature.make_noise()%3B%0A%7D%0A
  content_markdown: >
    Rustは、トレイトによるポリモーフィズムをサポートしています。トレイトを使うと、構造体型にメソッド群を関連付けることができます。


    まず、トレイト内のメソッドのシグネチャを定義します。


    ```

    trait MyTrait {
        fn foo(&self);
        ...
    }

    ```


    構造体がトレイトを実装すると、実際の型を知らなくてもトレイトの型（例：`&dyn MyTrait`）を通じて間接的に構造体と対話できる契約が確立されます。
    

    構造体に実装されたトレイトメソッドは、実装ブロックの中で定義されます。


    ```rust

    impl MyTrait for MyStruct { 
        fn foo(&self) {
            ...
        }
        ... 
    }

    ```
- title: トレイトに実装されたメソッド
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=struct%20SeaCreature%20%7B%0A%20%20%20%20pub%20name%3A%20String%2C%0A%20%20%20%20noise%3A%20String%2C%0A%7D%0A%0Aimpl%20SeaCreature%20%7B%0A%20%20%20%20pub%20fn%20get_sound(%26self)%20-%3E%20%26str%20%7B%0A%20%20%20%20%20%20%20%20%26self.noise%0A%20%20%20%20%7D%0A%7D%0A%0Atrait%20NoiseMaker%20%7B%0A%20%20%20%20fn%20make_noise(%26self)%3B%0A%20%20%20%20%0A%20%20%20%20fn%20make_alot_of_noise(%26self)%7B%0A%20%20%20%20%20%20%20%20self.make_noise()%3B%0A%20%20%20%20%20%20%20%20self.make_noise()%3B%0A%20%20%20%20%20%20%20%20self.make_noise()%3B%0A%20%20%20%20%7D%0A%7D%0A%0Aimpl%20NoiseMaker%20for%20SeaCreature%20%7B%0A%20%20%20%20fn%20make_noise(%26self)%20%7B%0A%20%20%20%20%20%20%20%20println!(%22%7B%7D%22%2C%20%26self.get_sound())%3B%0A%20%20%20%20%7D%0A%7D%0A%0Afn%20main()%20%7B%0A%20%20%20%20let%20creature%20%3D%20SeaCreature%20%7B%0A%20%20%20%20%20%20%20%20name%3A%20String%3A%3Afrom(%22Ferris%22)%2C%0A%20%20%20%20%20%20%20%20noise%3A%20String%3A%3Afrom(%22blub%22)%2C%0A%20%20%20%20%7D%3B%0A%20%20%20%20creature.make_alot_of_noise()%3B%0A%7D%0A
  content_markdown: >
    トレイトは実装されたメソッドを持つことができます。


    この関数は構造体の内部フィールドに直接アクセスすることはできませんが、多くのトレイトの実装の間で動作を共有するのに便利です。
- title: トレイトの継承
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=struct%20SeaCreature%20%7B%0A%20%20%20%20pub%20name%3A%20String%2C%0A%20%20%20%20noise%3A%20String%2C%0A%7D%0A%0Aimpl%20SeaCreature%20%7B%0A%20%20%20%20pub%20fn%20get_sound(%26self)%20-%3E%20%26str%20%7B%0A%20%20%20%20%20%20%20%20%26self.noise%0A%20%20%20%20%7D%0A%7D%0A%0Atrait%20NoiseMaker%20%7B%0A%20%20%20%20fn%20make_noise(%26self)%3B%0A%7D%0A%0Atrait%20LoudNoiseMaker%3A%20NoiseMaker%20%7B%0A%20%20%20%20fn%20make_alot_of_noise(%26self)%20%7B%0A%20%20%20%20%20%20%20%20self.make_noise()%3B%0A%20%20%20%20%20%20%20%20self.make_noise()%3B%0A%20%20%20%20%20%20%20%20self.make_noise()%3B%0A%20%20%20%20%7D%0A%7D%0A%0Aimpl%20NoiseMaker%20for%20SeaCreature%20%7B%0A%20%20%20%20fn%20make_noise(%26self)%20%7B%0A%20%20%20%20%20%20%20%20println!(%22%7B%7D%22%2C%20%26self.get_sound())%3B%0A%20%20%20%20%7D%0A%7D%0A%0Aimpl%20LoudNoiseMaker%20for%20SeaCreature%20%7B%7D%0A%0Afn%20main()%20%7B%0A%20%20%20%20let%20creature%20%3D%20SeaCreature%20%7B%0A%20%20%20%20%20%20%20%20name%3A%20String%3A%3Afrom(%22Ferris%22)%2C%0A%20%20%20%20%20%20%20%20noise%3A%20String%3A%3Afrom(%22blub%22)%2C%0A%20%20%20%20%7D%3B%0A%20%20%20%20creature.make_alot_of_noise()%3B%0A%7D%0A
  content_markdown: |
    トレイトは他のトレイトからメソッドを継承することができます。
- title: 動的ディスパッチと静的ディスパッチ
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=struct%20SeaCreature%20%7B%0A%20%20%20%20pub%20name%3A%20String%2C%0A%20%20%20%20noise%3A%20String%2C%0A%7D%0A%0Aimpl%20SeaCreature%20%7B%0A%20%20%20%20pub%20fn%20get_sound(%26self)%20-%3E%20%26str%20%7B%0A%20%20%20%20%20%20%20%20%26self.noise%0A%20%20%20%20%7D%0A%7D%0A%0Atrait%20NoiseMaker%20%7B%0A%20%20%20%20fn%20make_noise(%26self)%3B%0A%7D%0A%0Aimpl%20NoiseMaker%20for%20SeaCreature%20%7B%0A%20%20%20%20fn%20make_noise(%26self)%20%7B%0A%20%20%20%20%20%20%20%20println!(%22%7B%7D%22%2C%20%26self.get_sound())%3B%0A%20%20%20%20%7D%0A%7D%0A%0Afn%20static_make_noise(creature%3A%20%26SeaCreature)%20%7B%0A%20%20%20%20%2F%2F%20we%20know%20the%20real%20type%0A%20%20%20%20creature.make_noise()%3B%0A%7D%0A%0Afn%20dynamic_make_noise(noise_maker%3A%20%26dyn%20NoiseMaker)%20%7B%0A%20%20%20%20%2F%2F%20we%20don't%20know%20the%20real%20type%0A%20%20%20%20noise_maker.make_noise()%3B%0A%7D%0A%0Afn%20main()%20%7B%0A%20%20%20%20let%20creature%20%3D%20SeaCreature%20%7B%0A%20%20%20%20%20%20%20%20name%3A%20String%3A%3Afrom(%22Ferris%22)%2C%0A%20%20%20%20%20%20%20%20noise%3A%20String%3A%3Afrom(%22blub%22)%2C%0A%20%20%20%20%7D%3B%0A%20%20%20%20static_make_noise(%26creature)%3B%0A%20%20%20%20dynamic_make_noise(%26creature)%3B%0A%7D%0A
  content_markdown: >
    メソッドは2つの方法で実行されます。

    * 静的ディスパッチ - インスタンスの型がわかっている場合、どの関数を呼び出せばよいかを直接知ることができる。

    * 動的ディスパッチ - インスタンスタイプが不明な場合、正しい関数を呼び出す方法を見つけなければならない。


    トレイト型である `&dyn MyTrait` は、動的ディスパッチを使って間接的にオブジェクトのインスタンスを操作する機能を提供します。


    動的ディスパッチを使用する場合、Rustは、人々が認識できるように、トレイト型の前に `dyn` を置くことを推奨します。


    メモリの詳細:

    * 動的ディスパッチは、実際の関数呼び出しを見つけるためにポインタを追跡するため、わずかに遅くなります。
- title: トレイトオブジェクト
  content_markdown: >
    オブジェクトのインスタンスを `&dyn MyTrait` 型のパラメータに渡すとき、 *トレイトオブジェクト* と呼ばれるものを渡します。


    インスタンスの正しいメソッドを間接的に呼び出すことを可能にするのがトレイトオブジェクトです。
    トレイトオブジェクトは、インスタンスのポインタと、インスタンスのメソッドへの関数ポインタのリストを保持する構造体です。


    メモリの詳細:

    * この関数のリストをC++ではvtableと呼んでいます。
- title: サイズの合わないデータの処理
  content_markdown: >
    トレイトを別の構造体の中に格納する場合、興味深い問題が発生します。
    
    トレイトは元の構造体を難読化するため、元のサイズも難読化されます。
    
    Rustでは、構造体に格納されるサイズの合わない値は、2つの方法で処理されます。


    * `generics` - パラメータ化された型を使用して、既知の型、つまり既知のサイズの構造体/関数を効果的に作成します。

    * `indirection` - ヒープ上にインスタンスを置くことで、実際の型のサイズを気にすることなく、単にそのポインタを格納することができるインダイレクトのレベルを得ることができます。
    他の方法もあります。
- title: ジェネリック関数
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=struct%20SeaCreature%20%7B%0A%20%20%20%20pub%20name%3A%20String%2C%0A%20%20%20%20noise%3A%20String%2C%0A%7D%0A%0Aimpl%20SeaCreature%20%7B%0A%20%20%20%20pub%20fn%20get_sound(%26self)%20-%3E%20%26str%20%7B%0A%20%20%20%20%20%20%20%20%26self.noise%0A%20%20%20%20%7D%0A%7D%0A%0Atrait%20NoiseMaker%20%7B%0A%20%20%20%20fn%20make_noise(%26self)%3B%0A%7D%0A%0Aimpl%20NoiseMaker%20for%20SeaCreature%20%7B%0A%20%20%20%20fn%20make_noise(%26self)%20%7B%0A%20%20%20%20%20%20%20%20println!(%22%7B%7D%22%2C%20%26self.get_sound())%3B%0A%20%20%20%20%7D%0A%7D%0A%0Afn%20generic_make_noise%3CT%3E(creature%3A%20%26T)%0Awhere%0A%20%20%20%20T%3A%20NoiseMaker%2C%0A%7B%0A%20%20%20%20%2F%2F%20we%20know%20the%20real%20type%20at%20compile-time%0A%20%20%20%20creature.make_noise()%3B%0A%7D%0A%0Afn%20main()%20%7B%0A%20%20%20%20let%20creature%20%3D%20SeaCreature%20%7B%0A%20%20%20%20%20%20%20%20name%3A%20String%3A%3Afrom(%22Ferris%22)%2C%0A%20%20%20%20%20%20%20%20noise%3A%20String%3A%3Afrom(%22blub%22)%2C%0A%20%20%20%20%7D%3B%0A%20%20%20%20generic_make_noise(%26creature)%3B%0A%7D%0A
  content_markdown: >
    Rustのジェネリクスは、トレイトと密接に連携しています。パラメータ化された型 `T` を記述するとき、引数に実装しなければならない必須のトレイトを列挙することで、引数として使用できる型を制限することができます。


    この例では、型 `T` はトレイト `Foo` を実装していなければなりません。

    ```rust

    fn my_function<T>(foo: T)

    where
        T:Foo
    {
        ...
    }

    ```


    ジェネリクスを使うことで、コンパイル時に型とサイズが既知の静的型付け関数を作成し、静的ディスパッチとサイズ付きの値としての保存を可能にします。
- title: ジェネリクス関数の省略記法
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=struct%20SeaCreature%20%7B%0A%20%20%20%20pub%20name%3A%20String%2C%0A%20%20%20%20noise%3A%20String%2C%0A%7D%0A%0Aimpl%20SeaCreature%20%7B%0A%20%20%20%20pub%20fn%20get_sound(%26self)%20-%3E%20%26str%20%7B%0A%20%20%20%20%20%20%20%20%26self.noise%0A%20%20%20%20%7D%0A%7D%0A%0Atrait%20NoiseMaker%20%7B%0A%20%20%20%20fn%20make_noise(%26self)%3B%0A%7D%0A%0Aimpl%20NoiseMaker%20for%20SeaCreature%20%7B%0A%20%20%20%20fn%20make_noise(%26self)%20%7B%0A%20%20%20%20%20%20%20%20println!(%22%7B%7D%22%2C%20%26self.get_sound())%3B%0A%20%20%20%20%7D%0A%7D%0A%0Afn%20generic_make_noise(creature%3A%20%26impl%20NoiseMaker)%0A%7B%0A%20%20%20%20%2F%2F%20we%20know%20the%20real%20type%20at%20compile-time%0A%20%20%20%20creature.make_noise()%3B%0A%7D%0A%0Afn%20main()%20%7B%0A%20%20%20%20let%20creature%20%3D%20SeaCreature%20%7B%0A%20%20%20%20%20%20%20%20name%3A%20String%3A%3Afrom(%22Ferris%22)%2C%0A%20%20%20%20%20%20%20%20noise%3A%20String%3A%3Afrom(%22blub%22)%2C%0A%20%20%20%20%7D%3B%0A%20%20%20%20generic_make_noise(%26creature)%3B%0A%7D%0A
  content_markdown: |
    Rustには、トレイトに制約されたジェネリクスを表現するための略記法があります。

    ```rust
    fn my_function(foo: impl Foo) {
        ...
    }
    ```

    上記の記法は下記のものと同等です。

    ```rust
    fn my_function<T>(foo: T)
    where
        T:Foo
    {
        ...
    }
    ```
- title: ボックス
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=struct%20SeaCreature%20%7B%0A%20%20%20%20pub%20name%3A%20String%2C%0A%20%20%20%20noise%3A%20String%2C%0A%7D%0A%0Aimpl%20SeaCreature%20%7B%0A%20%20%20%20pub%20fn%20get_sound(%26self)%20-%3E%20%26str%20%7B%0A%20%20%20%20%20%20%20%20%26self.noise%0A%20%20%20%20%7D%0A%7D%0A%0Atrait%20NoiseMaker%20%7B%0A%20%20%20%20fn%20make_noise(%26self)%3B%0A%7D%0A%0Aimpl%20NoiseMaker%20for%20SeaCreature%20%7B%0A%20%20%20%20fn%20make_noise(%26self)%20%7B%0A%20%20%20%20%20%20%20%20println!(%22%7B%7D%22%2C%20%26self.get_sound())%3B%0A%20%20%20%20%7D%0A%7D%0A%0Astruct%20Ocean%20%7B%0A%20%20%20%20animals%3A%20Vec%3CBox%3Cdyn%20NoiseMaker%3E%3E%2C%0A%7D%0A%0Afn%20main()%20%7B%0A%20%20%20%20let%20ferris%20%3D%20SeaCreature%20%7B%0A%20%20%20%20%20%20%20%20name%3A%20String%3A%3Afrom(%22Ferris%22)%2C%0A%20%20%20%20%20%20%20%20noise%3A%20String%3A%3Afrom(%22blub%22)%2C%0A%20%20%20%20%7D%3B%0A%20%20%20%20let%20sarah%20%3D%20SeaCreature%20%7B%0A%20%20%20%20%20%20%20%20name%3A%20String%3A%3Afrom(%22Sarah%22)%2C%0A%20%20%20%20%20%20%20%20noise%3A%20String%3A%3Afrom(%22swish%22)%2C%0A%20%20%20%20%7D%3B%0A%20%20%20%20let%20ocean%20%3D%20Ocean%20%7B%0A%20%20%20%20%20%20%20%20animals%3A%20vec!%5BBox%3A%3Anew(ferris)%2C%20Box%3A%3Anew(sarah)%5D%2C%0A%20%20%20%20%7D%3B%0A%20%20%20%20for%20a%20in%20ocean.animals.iter()%20%7B%0A%20%20%20%20%20%20%20%20a.make_noise()%3B%0A%20%20%20%20%7D%0A%7D%0A
  content_markdown: >
    `Box` は、データをスタックからヒープに移動させるためのデータ構造です。


    `Box` はスマートポインタと呼ばれる構造体で、ヒープ上のデータへのポインタを保持します。


    `Box` はサイズが既知の構造体であるため（ポインタを保持しているだけなので）、
    フィールドのサイズを知っていなければならない構造体の中で、何かの参照を格納する方法としてよく使われます。


    `Box` は一般的なものなので、どこからでも使うことができます。


    ```rust

    Box::new(Foo { ... })

    ```
- title: ジェネリクス構造体のおさらい
  content_markdown: >
    ジェネリクス構造体は、そのパラメータ化された型がtraitによって制約されることもあります。


    ```rust

    struct MyStruct<T>

    where
        T: MyTrait
    {
        foo: T
        ...
    }

    ```


    ジェネリクス構造体は、その実装ブロックにパラメータ化された型を持っています。


    ```rust

    impl<T> MyStruct<T> {
        ...
    }

    ```
- title: 第 7 章 - まとめ
  content_markdown: >
    私たちのアイデアを明確に表現するために、本章でより多くの言語機能を学んできました。

    Rustの抽象化機能はシンプルかもしれませんが、コードを書くのが楽しくなるような強力なものです。

    この章では、 `Box` を使用してスマートポインタを垣間見ることができました。

    次の章では、スマートポインタが他の特殊なメモリの状況でどのように役立つかについて学びます。


    参考:

    * [Video - Object-oriented Programming in 7
    minutes](https://www.youtube.com/watch?v=pTB0EiLXUC8)

    * [Article - "The faster you unlearn OOP, the better for you and your
    software"](https://dpc.pw/the-faster-you-unlearn-oop-the-better-for-you-and-your-software)
