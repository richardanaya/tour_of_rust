- title: 3장 - 기본 데이터 구조 자료형
  content_markdown: >
    이제 기본 자료형을 뒤로 할 시간입니다! 이번 장에서는

    Rust에서 가장 기초적인 데이터 구조를 살펴보고,

    그들의 메모리 상에서의 표현에 대해 자세히 들여다 보겠습니다.

    Rust가 어떻게 동작하는지에 대해 얼마나 숨김이 없는지를 즐기실 수 있으리라 생각합니다.
- title: 구조체
  content_markdown: >
    `struct`는 필드(field)들의 collection입니다.


    *field*는 간단하게 데이터 구조에 연관된 데이터 값입니다. 이 값은
    기본 자료형이나 데이터 구조일 수 있습니다.


    이 정의는 메모리 상에 field들을 어떻게 배치할지에 대한 컴파일러의 청사진과도 같습니다.
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=struct%20SeaCreature%20%7B%0A%20%20%20%20%2F%2F%20String%EC%9D%80%20struct%EB%8B%A4%0A%20%20%20%20animal_type%3A%20String%2C%0A%20%20%20%20name%3A%20String%2C%0A%20%20%20%20arms%3A%20i32%2C%0A%20%20%20%20legs%3A%20i32%2C%0A%20%20%20%20weapon%3A%20String%2C%0A%7D%0A
- title: 메소드 호출하기
  content_markdown: >
    함수와 달리, 메소드는 특정 데이터 자료형과 연관된 함수입니다.


    **스태틱 메소드(static methods)** - 자료형 그 자체에 속하는 메소드로서,
    `::` 연산자를 이용하여 호출함.


    **인스턴스 메소드(instance methods)** - 자료형의 인스턴스에 속하는 메소드로서,
    `.` 연산자를 이용하여 호출함.


    다가올 장에서 여러분만의 메소드를 만드는 법에 대해 살펴보겠습니다.
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=fn%20main()%20%7B%0A%20%20%20%20%2F%2F%20static%20method%EB%A5%BC%20%EC%82%AC%EC%9A%A9%ED%95%98%EC%97%AC%20String%EC%9D%98%20instance%EB%A5%BC%20%EC%83%9D%EC%84%B1%0A%20%20%20%20let%20s%20%3D%20String%3A%3Afrom(%22Hello%20world!%22)%3B%0A%20%20%20%20%2F%2F%20instance%EC%9D%98%20%EB%A9%94%EC%86%8C%EB%93%9C%EB%A5%BC%20%EC%82%AC%EC%9A%A9%0A%20%20%20%20println!(%22%7B%7D%EC%9D%98%20%EA%B8%80%EC%9E%90%20%EC%88%98%EB%8A%94%20%7B%7D%EC%9E%85%EB%8B%88%EB%8B%A4.%22%2C%20s%2C%20s.len())%3B%0A%7D%0A
- title: 메모리
  content_markdown: >
    Rust 프로그램에는 데이터가 저장되는 세 가지의 메모리 영역이 있습니다:

    * **데이터 메모리(data memory)** - 크기가 고정 되었으며 **static** (i.e. 
    프로그램이 실행되는 동안 항상 사용 가능)한 데이터용.
      프로그램의 텍스트를 생각해봅시다(예: "Hello World!"): 이 텍스트의 바이트들은 오직 한 곳에서만 읽히므로
      이 영역에 저장될 수 있습니다. 이런 종류의 데이터는 컴파일러가 많은 최적화를 하며,
      위치가 알려져 있고 고정되어 있기 때문에 일반적으로 사용하기에 매우 빠르다고 여깁니다.
    * **스택 메모리(stack memory)** - 함수 내에서 변수로 선언되는 데이터용.
      이 메모리의 위치는 함수 호출 동안에는 절대 변하지 않기 때문에 컴파일러가
      코드를 최적화할 수 있으며, 이로 인해 접근하기에 매우 빠릅니다.
    * **힙 메모리(heap memory)** - 애플리케이션이 실행되는 동안 생성되는 데이터용.
      이 영역의 데이터는 추가하거나, 이동하거나, 제거하거나, 크기를 바꾸거나, 등을
      할 수 있습니다. 이런 동적 속성 때문에 일반적으로 사용하기에 느리다고 여기지만,
      훨씬 더 창의적인 메모리 사용이 가능합니다. 데이터가 이 영역에 추가되면
      **할당(allocation)**이라고 부릅니다. 데이터가 이 영역에서 제거되면 **해제(deallocation)**라고 부릅니다.
- title: 메모리에 데이터 생성하기
  content_markdown: >
    코드에서 **struct**를 **인스턴스화(instantiate)** 하면 프로그램은
    연관된 field 데이터들을 메모리 상에 나란히 생성합니다.


    `StructName { ... }`.


    와 같이 안에 모든 field 값을 지정함으로써 instantiate 합니다.


    struct의 field 값들은 `.` 연산자를 통해 접근합니다.


    이 예제의 메모리 상세:

    * 큰따옴표 안의 텍스트는 읽기 전용 데이터이므로 (예: "ferris"), *data memory 영역*에
      위치합니다.
    * `String::from` 함수 호출은 `String` struct를 생성하며 *stack*에 SeaCreature의 field들과 나란히 위치시킵니다.
      String은 변경될 수 있는 텍스트를 의미하며 이는 다음에 의해 이루어집니다:
      1. 텍스트가 수정될 수 있도록 *heap*에 메모리를 생성
      2. 해당 메모리 위치에 대한 참조를 *heap*에 저장하고 이를 `String` struct에 저장
      (앞으로 강의에서 더 자세히)
    * 마지막으로 우리의 두 친구 *Ferris*와 *Sarah*는 우리 프로그램에서 언제나 고정된 위치를 가지는
      자료 구조를 가지게 되었고, 따라서 *stack*에 위치하게 되었습니다.
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=struct%20SeaCreature%20%7B%0A%20%20%20%20animal_type%3A%20String%2C%0A%20%20%20%20name%3A%20String%2C%0A%20%20%20%20arms%3A%20i32%2C%0A%20%20%20%20legs%3A%20i32%2C%0A%20%20%20%20weapon%3A%20String%2C%0A%7D%0A%0Afn%20main()%20%7B%0A%20%20%20%20%2F%2F%20SeaCreature%EC%9D%98%20%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%8A%94%20stack%EC%97%90%20%EC%9E%88%EC%9D%8C%0A%20%20%20%20let%20ferris%20%3D%20SeaCreature%20%7B%0A%20%20%20%20%20%20%20%20%2F%2F%20String%20struct%EB%8F%84%20stack%EC%97%90%20%EC%9E%88%EC%A7%80%EB%A7%8C%2C%0A%20%20%20%20%20%20%20%20%2F%2F%20heap%EC%97%90%20%EC%9E%88%EB%8A%94%20%EB%8D%B0%EC%9D%B4%ED%84%B0%EC%97%90%20%EB%8C%80%ED%95%9C%20%EC%B0%B8%EC%A1%B0%EB%A5%BC%20%EA%B0%96%EA%B3%A0%20%EC%9E%88%EC%9D%8C%0A%20%20%20%20%20%20%20%20animal_type%3A%20String%3A%3Afrom(%22%EA%B2%8C%22)%2C%0A%20%20%20%20%20%20%20%20name%3A%20String%3A%3Afrom(%22Ferris%22)%2C%0A%20%20%20%20%20%20%20%20arms%3A%202%2C%0A%20%20%20%20%20%20%20%20legs%3A%204%2C%0A%20%20%20%20%20%20%20%20weapon%3A%20String%3A%3Afrom(%22%EC%A7%91%EA%B2%8C%22)%2C%0A%20%20%20%20%7D%3B%0A%0A%20%20%20%20let%20sarah%20%3D%20SeaCreature%20%7B%0A%20%20%20%20%20%20%20%20animal_type%3A%20String%3A%3Afrom(%22%EB%AC%B8%EC%96%B4%22)%2C%0A%20%20%20%20%20%20%20%20name%3A%20String%3A%3Afrom(%22Sarah%22)%2C%0A%20%20%20%20%20%20%20%20arms%3A%208%2C%0A%20%20%20%20%20%20%20%20legs%3A%200%2C%0A%20%20%20%20%20%20%20%20weapon%3A%20String%3A%3Afrom(%22%EC%97%86%EC%9D%8C%22)%2C%0A%20%20%20%20%7D%3B%0A%0A%20%20%20%20println!(%0A%20%20%20%20%20%20%20%20%22%7B%7D%EB%8A%94%20%7B%7D%EC%9D%B4%EB%8B%A4.%20%7B%7D%EA%B0%9C%EC%9D%98%20%ED%8C%94%EA%B3%BC%2C%20%7B%7D%EA%B0%9C%EC%9D%98%20%EB%8B%A4%EB%A6%AC%EC%99%80%2C%20%7B%7D%EB%A5%BC%20%EB%AC%B4%EA%B8%B0%EB%A1%9C%20%EA%B0%96%EA%B3%A0%20%EC%9E%88%EB%8B%A4.%22%2C%0A%20%20%20%20%20%20%20%20ferris.name%2C%20ferris.animal_type%2C%20ferris.arms%2C%20ferris.legs%2C%20ferris.weapon%0A%20%20%20%20)%3B%0A%20%20%20%20println!(%0A%20%20%20%20%20%20%20%20%22%7B%7D%EB%8A%94%20%7B%7D%EC%9D%B4%EB%8B%A4.%20%7B%7D%EA%B0%9C%EC%9D%98%20%ED%8C%94%EA%B3%BC%2C%20%7B%7D%EA%B0%9C%EC%9D%98%20%EB%8B%A4%EB%A6%AC%EB%A5%BC%20%EA%B0%96%EA%B3%A0%20%EC%9E%88%EB%8B%A4.%20%EB%AC%B4%EA%B8%B0%EB%8A%94%20%EC%97%86%EB%8B%A4..%22%2C%0A%20%20%20%20%20%20%20%20sarah.name%2C%20sarah.animal_type%2C%20sarah.arms%2C%20sarah.legs%0A%20%20%20%20)%3B%0A%7D%0A
- title: Tuple-like 구조체
  content_markdown: |
    간결함을 위해, tuple처럼 사용되는 struct를 생성할 수 있습니다.
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=struct%20Location(i32%2C%20i32)%3B%0A%0Afn%20main()%20%7B%0A%20%20%20%20%2F%2F%20%EC%9D%B4%EA%B2%83%EB%8F%84%20%EC%97%AC%EC%A0%84%ED%9E%88%20stack%EC%97%90%20%EC%9E%88%EB%8A%94%20struct%EC%9E%84%0A%20%20%20%20let%20loc%20%3D%20Location(42%2C%2032)%3B%0A%20%20%20%20println!(%22%7B%7D%2C%20%7B%7D%22%2C%20loc.0%2C%20loc.1)%3B%0A%7D%0A
- title: Unit-like 구조체
  content_markdown: >
    struct에는 아무 field도 없어도 됩니다.


    1장에서 얘기 했듯이 *unit*은 빈 tuple인 `()`의 또 다른 이름입니다.
    이 때문에 이런 종류의 struct를 *Unit-like* 이라고 부릅니다.


    이런 유형의 struct는 거의 쓰이지 않습니다.
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=struct%20Marker%3B%0A%0Afn%20main()%20%7B%0A%20%20%20%20let%20_m%20%3D%20Marker%3B%0A%7D%0A
- title: 열거형
  content_markdown: >
    열거형(enumeration)은 `enum` 키워드를 통해 몇 가지 태그된 원소의 값을 가질 수 있는
    새로운 자료형을 생성할 수 있습니다.


    `match`는 모든 가능한 enum 값을 빠짐없이 처리할 수 있도록 하여
    퀄리티 있는 코드를 만드는데 강력한 도구가 되어줄 것입니다.
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=%23!%5Ballow(dead_code)%5D%20%2F%2F%20%EC%9D%B4%20%EC%A4%84%EC%9D%80%20%EC%BB%B4%ED%8C%8C%EC%9D%BC%EB%9F%AC%20%EA%B2%BD%EA%B3%A0%EB%A5%BC%20%EB%B0%A9%EC%A7%80%ED%95%B4%EC%A4%8C%0A%0Aenum%20Species%20%7B%0A%20%20%20%20Crab%2C%0A%20%20%20%20Octopus%2C%0A%20%20%20%20Fish%2C%0A%20%20%20%20Clam%2C%0A%7D%0A%0Astruct%20SeaCreature%20%7B%0A%20%20%20%20species%3A%20Species%2C%0A%20%20%20%20name%3A%20String%2C%0A%20%20%20%20arms%3A%20i32%2C%0A%20%20%20%20legs%3A%20i32%2C%0A%20%20%20%20weapon%3A%20String%2C%0A%7D%0A%0Afn%20main()%20%7B%0A%20%20%20%20let%20ferris%20%3D%20SeaCreature%20%7B%0A%20%20%20%20%20%20%20%20species%3A%20Species%3A%3ACrab%2C%0A%20%20%20%20%20%20%20%20name%3A%20String%3A%3Afrom(%22Ferris%22)%2C%0A%20%20%20%20%20%20%20%20arms%3A%202%2C%0A%20%20%20%20%20%20%20%20legs%3A%204%2C%0A%20%20%20%20%20%20%20%20weapon%3A%20String%3A%3Afrom(%22claw%22)%2C%0A%20%20%20%20%7D%3B%0A%0A%20%20%20%20match%20ferris.species%20%7B%0A%20%20%20%20%20%20%20%20Species%3A%3ACrab%20%3D%3E%20println!(%22%7B%7D%EB%8A%94%20%EA%B2%8C%EC%9D%B4%EB%8B%A4%22%2C%20ferris.name)%2C%0A%20%20%20%20%20%20%20%20Species%3A%3AOctopus%20%3D%3E%20println!(%22%7B%7D%EB%8A%94%20%EB%AC%B8%EC%96%B4%EC%9D%B4%EB%8B%A4%22%2C%20ferris.name)%2C%0A%20%20%20%20%20%20%20%20Species%3A%3AFish%20%3D%3E%20println!(%22%7B%7D%EB%8A%94%20%EB%AC%BC%EA%B3%A0%EA%B8%B0%EC%9D%B4%EB%8B%A4%22%2C%20ferris.name)%2C%0A%20%20%20%20%20%20%20%20Species%3A%3AClam%20%3D%3E%20println!(%22%7B%7D%EB%8A%94%20%EC%A1%B0%EA%B0%9C%EC%9D%B4%EB%8B%A4%22%2C%20ferris.name)%2C%0A%20%20%20%20%7D%0A%7D%0A
- title: 열거형과 데이터
  content_markdown: >
    `enum`의 원소들은 C의 *union*처럼 동작할 수 있도록 한 개 이상의 자료형을 가질 수 있습니다.


    `enum`이 `match`를 통해 패턴 일치될 때, 각각의 데이터 값에 변수명을 붙일 수 있습니다.


    `enum`의 메모리 상세:

    * enum 데이터 값은 가장 큰 원소의 메모리 크기와 같은 메모리 크기를 가집니다.
    이는 가능한 모든 값이 동일한 메모리 공간에 들어갈 수 있게 해줍니다.

    * 원소의 자료형(있는 경우)에 더하여, 각 원소는
    무슨 태그에 해당하는지 나타내는 숫자값도 갖습니다.


    다른 상세 정보:

    * Rust의 `enum`은 *tagged union*으로도 알려져 있습니다.

    * Rust가 *대수적 자료형(algebraic types)*을 갖고 있다고 할 때 이는
    자료형을 조합하여 새 자료형을 만드는 것을 의미합니다.
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=%23!%5Ballow(dead_code)%5D%20%2F%2F%20%EC%9D%B4%20%EC%A4%84%EC%9D%80%20%EC%BB%B4%ED%8C%8C%EC%9D%BC%EB%9F%AC%20%EA%B2%BD%EA%B3%A0%EB%A5%BC%20%EB%B0%A9%EC%A7%80%ED%95%B4%EC%A4%8C%0A%0Aenum%20Species%20%7B%0A%20%20%20%20Crab%2C%0A%20%20%20%20Octopus%2C%0A%20%20%20%20Fish%2C%0A%20%20%20%20Clam%2C%0A%7D%0Aenum%20PoisonType%20%7B%0A%20%20%20%20Acidic%2C%0A%20%20%20%20Painful%2C%0A%20%20%20%20Lethal%2C%0A%7D%0Aenum%20Size%20%7B%0A%20%20%20%20Big%2C%0A%20%20%20%20Small%2C%0A%7D%0Aenum%20Weapon%20%7B%0A%20%20%20%20Claw(i32%2C%20Size)%2C%0A%20%20%20%20Poison(PoisonType)%2C%0A%20%20%20%20None%2C%0A%7D%0A%0Astruct%20SeaCreature%20%7B%0A%20%20%20%20species%3A%20Species%2C%0A%20%20%20%20name%3A%20String%2C%0A%20%20%20%20arms%3A%20i32%2C%0A%20%20%20%20legs%3A%20i32%2C%0A%20%20%20%20weapon%3A%20Weapon%2C%0A%7D%0A%0Afn%20main()%20%7B%0A%20%20%20%20%2F%2F%20SeaCreature%EC%9D%98%20%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%8A%94%20stack%EC%97%90%20%EC%9E%88%EC%9D%8C%0A%20%20%20%20let%20ferris%20%3D%20SeaCreature%20%7B%0A%20%20%20%20%20%20%20%20%2F%2F%20String%20struct%EB%8F%84%20stack%EC%97%90%20%EC%9E%88%EC%A7%80%EB%A7%8C%2C%0A%20%20%20%20%20%20%20%20%2F%2F%20heap%EC%97%90%20%EC%9E%88%EB%8A%94%20%EB%8D%B0%EC%9D%B4%ED%84%B0%EC%97%90%20%EB%8C%80%ED%95%9C%20%EC%B0%B8%EC%A1%B0%EB%A5%BC%20%EA%B0%96%EA%B3%A0%20%EC%9E%88%EC%9D%8C%0A%20%20%20%20%20%20%20%20species%3A%20Species%3A%3ACrab%2C%0A%20%20%20%20%20%20%20%20name%3A%20String%3A%3Afrom(%22Ferris%22)%2C%0A%20%20%20%20%20%20%20%20arms%3A%202%2C%0A%20%20%20%20%20%20%20%20legs%3A%204%2C%0A%20%20%20%20%20%20%20%20weapon%3A%20Weapon%3A%3AClaw(2%2C%20Size%3A%3ASmall)%2C%0A%20%20%20%20%7D%3B%0A%0A%20%20%20%20match%20ferris.species%20%7B%0A%20%20%20%20%20%20%20%20Species%3A%3ACrab%20%3D%3E%20match%20ferris.weapon%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20Weapon%3A%3AClaw(num_claws%2C%20size)%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20let%20size_description%20%3D%20match%20size%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20Size%3A%3ABig%20%3D%3E%20%22%ED%81%B0%22%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20Size%3A%3ASmall%20%3D%3E%20%22%EC%9E%91%EC%9D%80%22%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20println!(%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22ferris%EB%8A%94%20%7B%7D%EA%B0%9C%EC%9D%98%20%7B%7D%20%EC%A7%91%EA%B2%8C%EB%A5%BC%20%EA%B0%80%EC%A7%84%20%EA%B2%8C%EC%9D%B4%EB%8B%A4%22%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20num_claws%2C%20size_description%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20)%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20_%20%3D%3E%20println!(%22ferris%EB%8A%94%20%EB%8B%A4%EB%A5%B8%20%EB%AC%B4%EA%B8%B0%EB%A5%BC%20%EA%B0%80%EC%A7%84%20%EA%B2%8C%EC%9D%B4%EB%8B%A4%22)%2C%0A%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20_%20%3D%3E%20println!(%22ferris%EB%8A%94%20%EB%8B%A4%EB%A5%B8%20%EB%8F%99%EB%AC%BC%EC%9D%B4%EB%8B%A4%22)%2C%0A%20%20%20%20%7D%0A%7D%0A
- title: 3장 - 마무리
  content_markdown: >
    신난다! 이제 우리는 아이디어를 코드로 표현할 수 있는 가장 기본적인 도구를 갖게 되었습니다.

    이제 Rust의 기본 기능이 어떻게 자료형들과 함께 조화롭고 간결하게 동작하는지
    어렴풋이 보이길 바랍니다.

    다음에는 자료형에 더 많은 표현의 유연함을 주는 개념인 *제네릭(generics)*에 대해
    알아보겠습니다.
